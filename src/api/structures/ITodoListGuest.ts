import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Guest entity for unauthenticated users with minimal permissions.
 *
 * This table tracks guest entity creation, update, and soft deletion timestamps
 * for auditing purposes.
 *
 * Guests have no authentication credentials such as email or password.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListGuest = {
  /**
   * Primary Key.
   *
   * Unique identifier for the guest entity.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the guest record was created.
   *
   * Reflects the creation date and time of this guest record in ISO 8601
   * format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the guest record was last updated.
   *
   * Reflects the last modification date and time of the guest record.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the guest record was deleted (soft delete).
   *
   * Nullable; a null value indicates the guest record is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListGuest {
  /**
   * Authorization response containing JWT tokens for guest users. Returned
   * after creating guest account or refreshing tokens.
   */
  export type IAuthorized = {
    /** Unique identifier (UUID) of the authorized guest user */
    id: string & tags.Format<"uuid">;

    /**
     * Timestamp when the guest record was created.
     *
     * Reflects the creation date and time of this guest record in ISO 8601
     * format.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the guest record was last updated.
     *
     * Reflects the last modification date and time of the guest record.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the guest record was deleted (soft delete).
     *
     * Nullable; a null value indicates the guest record is active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /** Token refresh request payload for guest users. */
  export type IRefresh = {
    /**
     * Refresh token string for obtaining new access tokens. Must be a valid
     * token issued previously during guest authorization.
     */
    refresh_token: string;
  };

  /**
   * Request type for filtering, sorting, and pagination of guest entities.
   *
   * Supports: page, limit, search filters, etc.
   */
  export type IRequest = {
    /** Page number for pagination, null to unset */
    page?: number | null | undefined;

    /** Limit of items per page, null to unset */
    limit?: number | null | undefined;
  };

  /**
   * Update data for todo_list_guest entity.
   *
   * Allows updating timestamps and soft deletion flag.
   *
   * Does not include authentication credentials as guests have none.
   */
  export type IUpdate = {
    /**
     * Timestamp when the guest record was created.
     *
     * Optional; can be updated in exceptional situations.
     */
    created_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp when the guest record was last updated.
     *
     * Optional; reflects the time of the last update.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp when the guest record was deleted (soft delete).
     *
     * Optional nullable; setting to null means active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
