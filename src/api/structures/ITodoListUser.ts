import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents authenticated users who can manage their own todo items.
 *
 * Includes email and hashed password fields for secure authentication.
 *
 * Supports audit timestamps and soft deletion to maintain data integrity.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListUser = {
  /**
   * Unique identifier of the user.
   *
   * Must be a UUID string uniquely identifying the user.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User email address used for authentication and contact.
   *
   * Must be unique across all users.
   */
  email: string;

  /**
   * Hashed password for user authentication.
   *
   * Stored securely; never exposed in responses.
   */
  password_hash: string;

  /** Timestamp when the user was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the user was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user was deleted (soft delete).
   *
   * Nullable; a null value means the user is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListUser {
  /**
   * Request payload for creating a new user account. Includes email and
   * plaintext password for registration; password is hashed server-side.
   */
  export type ICreate = {
    /**
     * Unique user email for registration. Must be a valid email format as
     * per standard conventions.
     */
    email: string;

    /**
     * Plaintext password provided by the user at registration. Password
     * complexity rules are checked server-side.
     */
    password: string;
  };

  /**
   * Authorization response containing JWT tokens for users. Returned after
   * user registration, login, or token refresh.
   */
  export type IAuthorized = {
    /** Unique identifier (UUID) of the authorized user. */
    id: string & tags.Format<"uuid">;

    /**
     * User email address used for authentication and contact.
     *
     * Must be unique across all users.
     */
    email: string;

    /**
     * Hashed password for user authentication.
     *
     * Stored securely; never exposed in responses.
     */
    password_hash: string;

    /** Timestamp when the user was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when the user was deleted (soft delete).
     *
     * Nullable; a null value means the user is active.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Login credentials for todo_list_user role.
   *
   * Includes unique email and password for authentication.
   *
   * Passwords are in plain text only for login requests; must be handled
   * securely.
   *
   * This type is used as the request body in login operations.
   */
  export type ILogin = {
    /** Unique email address of the user for authentication. */
    email: string & tags.Format<"email">;

    /** Plain text password to authenticate the user. */
    password: string;
  };

  /**
   * Request body for refreshing JWT tokens of todo_list_user.
   *
   * Contains the refresh token string.
   *
   * Used to obtain new access tokens without re-login.
   *
   * This type is used as request body in token refresh API.
   */
  export type IRefresh = {
    /** The refresh token string issued to the user. */
    refresh_token: string;
  };

  /** Request parameters for retrieving a filtered and paginated list of users. */
  export type IRequest = {
    /** Optional page number for pagination. */
    page?: number | null | undefined;

    /** Optional limit of records per page. */
    limit?: number | null | undefined;

    /** Optional filter to include users whose email contains this substring. */
    emailContains?: string | null | undefined;

    /** Optional filter to retrieve users created after this datetime. */
    createdAfter?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional filter to retrieve users created before this datetime. */
    createdBefore?: (string & tags.Format<"date-time">) | null | undefined;

    /** Optional field to indicate sorting by 'created_at' or 'updated_at'. */
    sortBy?: "created_at" | "updated_at" | null | undefined;

    /** Optional sorting direction; ascending or descending. */
    sortDirection?: "asc" | "desc" | null | undefined;
  };

  /**
   * Update data for todo_list_user entity.
   *
   * Allows modifying email, hashed password, and timestamps.
   *
   * Cannot modify immutable id field or other ownership properties.
   */
  export type IUpdate = {
    /** Email address to update. */
    email?: string | undefined;

    /** Hashed password to update. */
    password_hash?: string | undefined;

    /** Timestamp for last updated time. */
    updated_at?: string | undefined;

    /** Timestamp for soft deletion; null means active. */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Summary view of the authenticated user entity.
   *
   * Includes essential fields for list display and references the
   * todo_list_user table.
   *
   * Excludes sensitive fields like password hash for security.
   */
  export type ISummary = {
    /** Primary key uniquely identifying the user. */
    id: string & tags.Format<"uuid">;

    /**
     * User email address used for authentication and contact.
     *
     * Unique across users.
     */
    email: string & tags.Format<"email">;

    /** Timestamp when the user was created. */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp when the user was last updated. */
    updated_at: string & tags.Format<"date-time">;
  };
}
