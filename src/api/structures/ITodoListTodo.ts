import { tags } from "typia";

/**
 * Represents todo items owned by users. Each todo has a unique title per user,
 * supports statuses (pending, in-progress, completed), and stores optional
 * descriptions. Enables independent CRUD and filtering operations by users.
 * Maintains audit trail fields for creation, update, and optional soft
 * deletion. Foreign key to todo_list_user ensures ownership linkage.
 *
 * Implements unique constraint on user and title for title uniqueness per user.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Primary Key.
   *
   * Unique identifier for the todo item.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owner user's primary key.
   *
   * References the id of the user owning this todo.
   */
  todo_list_user_id: string & tags.Format<"uuid">;

  /**
   * Title of the todo item.
   *
   * Must be unique per user and max length 100 characters.
   */
  title: string;

  /**
   * Optional detailed description of the todo.
   *
   * Max length 500 characters.
   */
  description?: string | null | undefined;

  /**
   * Status of the todo item.
   *
   * Must be exactly one of 'pending', 'in-progress', or 'completed'.
   */
  status: "pending" | "in-progress" | "completed";

  /** Timestamp when the todo was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the todo was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null means active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodo {
  /** Request parameters for filtered, paginated todo list retrieval. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limitation of records per page.
     *
     * @default 100
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Filter todos by status; must be 'pending', 'in-progress', or
     * 'completed'.
     */
    status?: "pending" | "in-progress" | "completed" | null | undefined;

    /** Search text to filter todos by title or description. */
    search?: string | null | undefined;

    /** Sort order for results, e.g. 'created_at_desc', 'title_asc'. */
    orderBy?: string | null | undefined;
  };

  /** Payload data to update an existing todo item. */
  export type IUpdate = {
    /**
     * Title of the todo item to update.
     *
     * Optional; must be unique per user, max length 100.
     */
    title?: string | null | undefined;

    /**
     * Optional description to update.
     *
     * Max length 500.
     */
    description?: string | null | undefined;

    /**
     * Status to update.
     *
     * Must be one of 'pending', 'in-progress', or 'completed'.
     */
    status?: "pending" | "in-progress" | "completed" | null | undefined;
  };

  /**
   * Summary view of a todo item entity for list displays.
   *
   * Includes id, title, and status essential for concise presentation.
   *
   * Reflects the todo_list_todos table with security considerations.
   */
  export type ISummary = {
    /** Primary key uniquely identifying the todo item. */
    id: string & tags.Format<"uuid">;

    /** Title of the todo item; unique per user; max length 100. */
    title: string;

    /**
     * Status of the todo item; possible values are 'pending',
     * 'in-progress', 'completed'.
     */
    status: "pending" | "in-progress" | "completed";
  };
}
