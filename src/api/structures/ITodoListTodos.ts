import { tags } from "typia";

/**
 * Represents todo items owned by users.
 *
 * Each todo has a unique title per user, supports statuses (pending,
 * in-progress, completed), and stores optional descriptions.
 *
 * Enables independent CRUD and filtering operations by users.
 *
 * Maintains audit trail fields for creation, update, and optional soft
 * deletion.
 *
 * Foreign key to todo_list_user ensures ownership linkage.
 *
 * Implements unique constraint on user and title for title uniqueness per user.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodos = {
  /**
   * Primary Key.
   *
   * Unique identifier of the todo item.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owner user's identifier.
   *
   * This represents the foreign key to link the todo to its user.
   */
  todo_list_user_id: string & tags.Format<"uuid">;

  /**
   * Title of the todo item; unique per user; max length 100.
   *
   * Brief textual title for the todo item.
   */
  title: string;

  /**
   * Optional detailed description of the todo item; max length 500. Can be
   * null if no description is provided.
   */
  description?: string | null | undefined;

  /**
   * Status of the todo item; possible values are 'pending', 'in-progress',
   * 'completed'. Must be exactly one of these strings.
   */
  status: "pending" | "in-progress" | "completed";

  /** Timestamp when the todo item was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the todo item was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp; null means active. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodos {
  /** Request parameters for filtered, paginated todo list retrieval. */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Limitation of records per page.
     *
     * @default 100
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter todos by status. */
    status?: "pending" | "in-progress" | "completed" | null | undefined;

    /** Search text to filter todos. */
    search?: string | null | undefined;

    /** Sort order preferences. */
    orderBy?: string | null | undefined;
  };

  /**
   * Update payload for todo items.
   *
   * Allows updates to title, description, and status.
   *
   * Each field is optional and nullable where applicable.
   */
  export type IUpdate = {
    /**
     * Title of the todo item; max length 100.
     *
     * Optional for update; if provided, must comply with unique and length
     * rules.
     */
    title?: string | undefined;

    /**
     * Optional detailed description of the todo item; max length 500.
     *
     * Nullable and optional for update.
     */
    description?: string | null | undefined;

    /**
     * Status of the todo item; possible values: 'pending', 'in-progress',
     * 'completed'.
     *
     * Optional for update.
     */
    status?: "pending" | "in-progress" | "completed" | undefined;
  };
}
