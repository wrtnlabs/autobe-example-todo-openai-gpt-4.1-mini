import { tags } from "typia";

/**
 * Main entity schema for todo list tasks.
 *
 * Represents a single task owned by a user with identifiers, descriptive text,
 * status flags, and audit timestamps.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListAppTodoItem = {
  /**
   * Unique identifier of the todo item.
   *
   * Primary key in the todo_list_app_todo_items table.
   *
   * Represents a specific task owned by a user.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier of the user who owns this todo item.
   *
   * Foreign key to todo_list_app_users table 'id' column.
   *
   * Establishes ownership relationship between task and user.
   */
  todo_list_app_user_id: string & tags.Format<"uuid">;

  /**
   * Task description text.
   *
   * Detailed text describing the todo item task.
   *
   * Maximum length limited by application logic to 256 characters.
   *
   * Non-empty string.
   */
  description: string;

  /**
   * Task completion status.
   *
   * Allowed values are:
   *
   * - 'pending': task is not yet completed.
   * - 'done': task has been completed.
   */
  status: "pending" | "done";

  /**
   * Timestamp when the todo item was created.
   *
   * Automatically set and stored in ISO 8601 with timezone.
   *
   * Used for sorting and audit purposes.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the todo item was last updated.
   *
   * Reflects the last modification time of the todo item.
   *
   * Automatically maintained by the system.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListAppTodoItem {
  /**
   * Request DTO for filtering and paginating todo items.
   *
   * Allows clients to specify pagination parameters and search string to
   * control which todo items are returned in lists.
   *
   * This type is used for list and search operations of todo items.
   */
  export type IRequest = {
    /**
     * Page number of the paginated results.
     *
     * Pagination control that specifies which page of the full result set
     * to retrieve.
     *
     * This property is optional; if omitted, the default is the first page.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of records to retrieve per page.
     *
     * Used to limit the number of todo items returned in a single response.
     *
     * If omitted, the default limit applies.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * A text keyword to filter todo items by description or other text
     * fields.
     *
     * Supports case-insensitive substring matching targeting todo item
     * descriptions.
     *
     * Used to find tasks that contain the given text in descriptions.
     */
    search?: string | undefined;
  };

  /**
   * Request DTO for creating a new todo item.
   *
   * Includes task description, completion status (usually 'pending'), and
   * user ownership identifier.
   *
   * Authorization ensures that todo_list_app_user_id matches the
   * authenticated user.
   */
  export type ICreate = {
    /**
     * Task description text.
     *
     * User provided text describing the todo item.
     *
     * Must be a non-empty string up to 256 characters.
     */
    description: string;

    /**
     * Task completion status.
     *
     * Allowed values:
     *
     * - 'pending' when task is newly created.
     * - 'done' if task is created in a completed state (rare).
     */
    status: "pending" | "done";

    /**
     * Unique identifier of the user who will own this todo item.
     *
     * Mandatory foreign key to the todo_list_app_users table.
     *
     * This field must be set by the system from authenticated user context
     * in secure implementations.
     */
    todo_list_app_user_id: string & tags.Format<"uuid">;
  };

  /**
   * Request DTO for updating todo items.
   *
   * Includes optional fields for modifying the description and/or status.
   *
   * Restrictions apply to updates depending on the current status of the todo
   * item.
   */
  export type IUpdate = {
    /**
     * Updated description of the todo item.
     *
     * May be provided only if the todo item status is 'pending'.
     *
     * Maximum length 256 characters.
     */
    description?: string | undefined;

    /**
     * Updated task completion status.
     *
     * Allowed values are 'pending' or 'done'.
     *
     * Allows marking a task as complete or reopening it.
     */
    status?: "pending" | "done" | undefined;
  };

  /**
   * Summary data for todo items in the todo list application.
   *
   * This schema includes only the most essential fields used for listing
   * tasks, enabling efficient retrieval and display without sensitive or
   * excessive details.
   *
   * It corresponds to the todo_list_app_todo_items database schema with
   * fields curated for secure and minimal data transfer.
   */
  export type ISummary = {
    /**
     * Unique identifier of the todo item.
     *
     * This is used to identify the todo task in the database and API
     * endpoints.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Text description of the todo item.
     *
     * Should be a non-empty string up to 256 characters describing the task
     * to be performed.
     */
    description: string;

    /**
     * Completion status of the todo item.
     *
     * Allowed values are 'pending' for incomplete tasks and 'done' for
     * completed tasks.
     */
    status: "pending" | "done";

    /**
     * Timestamp when the todo item was created.
     *
     * Records when the task was initially added to the todo list.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
