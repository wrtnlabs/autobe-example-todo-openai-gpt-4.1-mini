import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAppTodoItem } from "../../../../../structures/ITodoListAppTodoItem";
import { IPageITodoListAppTodoItem } from "../../../../../structures/IPageITodoListAppTodoItem";

/**
 * Create a new todo item for a user.
 *
 * Creates a new todo item owned by the specified user. The description must be
 * non-empty and at most 256 characters. Status must be either 'pending' or
 * 'done', typically 'pending' at creation. The item is uniquely identified and
 * timestamps for creation and last update are recorded.
 *
 * Only the authenticated user owning the specified user ID may perform this
 * operation. The system enforces ownership and validates input values.
 *
 * The operation relates to the todo_list_app_todo_items table in the Prisma
 * schema. It references todo_list_app_users via the foreign key
 * todo_list_app_user_id. The response entity contains all standard todo item
 * fields.
 *
 * Errors may occur if the description is invalid, if the status is not
 * recognized, or if authorization fails.
 *
 * Client must supply the user ID in the path and a valid request body matching
 * the ITodoListAppTodoItem.ICreate schema.
 *
 * Related operations include retrieving the todo items list, updating existing
 * items, and deleting items.
 *
 * @param props.connection
 * @param props.todoListAppUserId Unique identifier of the owning todo list app
 *   user
 * @param props.body Creation info of the todo item
 * @path /todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems
 * @accessor api.functional.todoListApp.user.todoListAppUsers.todoListAppTodoItems.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the owning todo list app user */
    todoListAppUserId: string & tags.Format<"uuid">;

    /** Creation info of the todo item */
    body: ITodoListAppTodoItem.ICreate;
  };
  export type Body = ITodoListAppTodoItem.ICreate;
  export type Response = ITodoListAppTodoItem;

  export const METADATA = {
    method: "POST",
    path: "/todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoListApp/user/todoListAppUsers/${encodeURIComponent(props.todoListAppUserId ?? "null")}/todoListAppTodoItems`;
  export const random = (): ITodoListAppTodoItem =>
    typia.random<ITodoListAppTodoItem>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoListAppUserId")(() =>
        typia.assert(props.todoListAppUserId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a filtered and paginated list of todo items for a user.
 *
 * Retrieve a filtered and paginated list of todo items owned by the user
 * identified by {todoListAppUserId}. This supports searching, sorting, and
 * paging to optimize task management.
 *
 * This operation enforces ownership, meaning users can only retrieve their own
 * tasks. It interacts with the todo_list_app_todo_items table, which stores
 * task descriptions, statuses (only "pending" or "done"), and timestamps.
 *
 * Security measures ensure the requesting user is authenticated and authorized
 * to view only their own tasks. Validation of the {todoListAppUserId} as a UUID
 * is performed. The response includes task summary details with pagination
 * data.
 *
 * Typical usage includes client applications requesting the current user's task
 * list with filter criteria, page size, and sort order.
 *
 * Errors include authorization failures if attempting to access other users'
 * tasks and proper handling of invalid request parameters or server errors.
 *
 * @param props.connection
 * @param props.todoListAppUserId Identifier of the user owning the todo items
 * @param props.body Search criteria and pagination parameters for todo items
 *   filtering
 * @path /todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems
 * @accessor api.functional.todoListApp.user.todoListAppUsers.todoListAppTodoItems.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the user owning the todo items */
    todoListAppUserId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for todo items filtering */
    body: ITodoListAppTodoItem.IRequest;
  };
  export type Body = ITodoListAppTodoItem.IRequest;
  export type Response = IPageITodoListAppTodoItem.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoListApp/user/todoListAppUsers/${encodeURIComponent(props.todoListAppUserId ?? "null")}/todoListAppTodoItems`;
  export const random = (): IPageITodoListAppTodoItem.ISummary =>
    typia.random<IPageITodoListAppTodoItem.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoListAppUserId")(() =>
        typia.assert(props.todoListAppUserId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a specific todo item owned by a user.
 *
 * Retrieve detailed information about a specific todo item owned by the user
 * identified by {todoListAppUserId} and the todo item identified by {id}.
 *
 * Only the owning user is authorized to access this data. The todo item
 * includes fields for description, status ("pending" or "done"), creation, and
 * update timestamps.
 *
 * This operation requires validation of both path parameters as UUIDs and
 * enforces strict ownership checking.
 *
 * Common errors are authorization failure if the item belongs to another user,
 * and not found if the item does not exist.
 *
 * The response provides full task details for client applications requiring
 * display or editing functionality.
 *
 * @param props.connection
 * @param props.todoListAppUserId Unique identifier of the user owning the todo
 *   item
 * @param props.id Unique identifier of the todo item
 * @path /todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems/:id
 * @accessor api.functional.todoListApp.user.todoListAppUsers.todoListAppTodoItems.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user owning the todo item */
    todoListAppUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the todo item */
    id: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListAppTodoItem;

  export const METADATA = {
    method: "GET",
    path: "/todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoListApp/user/todoListAppUsers/${encodeURIComponent(props.todoListAppUserId ?? "null")}/todoListAppTodoItems/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITodoListAppTodoItem =>
    typia.random<ITodoListAppTodoItem>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoListAppUserId")(() =>
        typia.assert(props.todoListAppUserId),
      );
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing todo item.
 *
 * Updates an existing todo item owned by the specified user. Description
 * changes are allowed only if the item is currently 'pending'. Status can be
 * updated to 'done' or 'pending'.
 *
 * The operation verifies user ownership and validates the description length
 * and status value.
 *
 * This operation manipulates the todo_list_app_todo_items DB table and relates
 * to todo_list_app_users for ownership.
 *
 * Request must include user ID and todo item ID in path and request body with
 * updated fields matching ITodoListAppTodoItem.IUpdate.
 *
 * Errors returned include authorization failure, validation errors, or item not
 * found errors.
 *
 * This complements the create and delete operations for managing todo items.
 *
 * @param props.connection
 * @param props.todoListAppUserId Unique identifier of the owning todo list app
 *   user
 * @param props.id Unique identifier of the todo item
 * @param props.body Updated data for the todo item
 * @path /todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems/:id
 * @accessor api.functional.todoListApp.user.todoListAppUsers.todoListAppTodoItems.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the owning todo list app user */
    todoListAppUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the todo item */
    id: string & tags.Format<"uuid">;

    /** Updated data for the todo item */
    body: ITodoListAppTodoItem.IUpdate;
  };
  export type Body = ITodoListAppTodoItem.IUpdate;
  export type Response = ITodoListAppTodoItem;

  export const METADATA = {
    method: "PUT",
    path: "/todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoListApp/user/todoListAppUsers/${encodeURIComponent(props.todoListAppUserId ?? "null")}/todoListAppTodoItems/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): ITodoListAppTodoItem =>
    typia.random<ITodoListAppTodoItem>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoListAppUserId")(() =>
        typia.assert(props.todoListAppUserId),
      );
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a todo item permanently.
 *
 * Deletes a todo item owned by the specified user. This operation permanently
 * removes the record from the database.
 *
 * It verifies ownership and returns no response content.
 *
 * The todo_list_app_todo_items schema does not support soft delete, so this is
 * a hard delete.
 *
 * Errors include authorization failure or item not found.
 *
 * Client must provide user ID and todo item ID in the path.
 *
 * Related operations include creating, updating, and retrieving todo items.
 *
 * @param props.connection
 * @param props.todoListAppUserId Unique identifier of the owning todo list app
 *   user
 * @param props.id Unique identifier of the todo item
 * @path /todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems/:id
 * @accessor api.functional.todoListApp.user.todoListAppUsers.todoListAppTodoItems.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the owning todo list app user */
    todoListAppUserId: string & tags.Format<"uuid">;

    /** Unique identifier of the todo item */
    id: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoListApp/user/todoListAppUsers/${encodeURIComponent(props.todoListAppUserId ?? "null")}/todoListAppTodoItems/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoListAppUserId")(() =>
        typia.assert(props.todoListAppUserId),
      );
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
