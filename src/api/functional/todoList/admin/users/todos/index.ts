import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodos } from "../../../../../structures/ITodoListTodos";
import { IPageITodoListTodos } from "../../../../../structures/IPageITodoListTodos";

/**
 * List and search todo items for a specific user.
 *
 * Retrieve a filtered, sorted, and paginated list of todo items for a specified
 * user.
 *
 * This operation accepts search parameters to filter todo items by status
 * (pending, in-progress, completed) and supports pagination and sorting by
 * creation timestamp or other relevant fields.
 *
 * Authorization is required; only the authenticated user or an admin can
 * retrieve this user's todos. The returned todo items include title,
 * description, status, and timestamps, reflecting data from the todo_list_todos
 * table.
 *
 * This endpoint corresponds to the todo_list_todos table in the Prisma schema,
 * linked to todo_list_user via the user ID foreign key. It enforces that only
 * todos for the given userId are returned.
 *
 * Errors occur if the user does not exist or if unauthorized access is
 * attempted.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @param props.body Search and pagination parameters to filter todos by status
 * @path /todoList/admin/users/:userId/todos
 * @accessor api.functional.todoList.admin.users.todos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;

    /** Search and pagination parameters to filter todos by status */
    body: ITodoListTodos.IRequest;
  };
  export type Body = ITodoListTodos.IRequest;
  export type Response = IPageITodoListTodos;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/users/:userId/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}/todos`;
  export const random = (): IPageITodoListTodos =>
    typia.random<IPageITodoListTodos>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific todo item for a user.
 *
 * Retrieve detailed information for a specific todo item belonging to a
 * specified user.
 *
 * This endpoint returns the full data of the todo item including its title,
 * description, and current status.
 *
 * Access is restricted to the owner user or administrators. Unauthorized
 * requests are denied with appropriate error messages.
 *
 * This operation directly maps to the todo_list_todos table in the Prisma
 * schema and enforces ownership checks based on the userId parameter.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @param props.todoId Unique identifier of the target todo item
 * @path /todoList/admin/users/:userId/todos/:todoId
 * @accessor api.functional.todoList.admin.users.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;

    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodos;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/users/:userId/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodos => typia.random<ITodoListTodos>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a todo item for a user.
 *
 * Update an existing todo item for a user.
 *
 * This operation allows modifying the title, description, and status of the
 * todo item. The title must be unique per user, non-empty, and under 100
 * characters. The description may be updated up to 500 characters.
 *
 * The status must be one of 'pending', 'in-progress', or 'completed'. Attempts
 * to update status to invalid values will be rejected.
 *
 * Access control restricts this operation to the todo owner or admins only.
 *
 * This endpoint corresponds to the todo_list_todos table in the Prisma schema.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @param props.todoId Unique identifier of the target todo item
 * @param props.body Updated todo item data
 * @path /todoList/admin/users/:userId/todos/:todoId
 * @accessor api.functional.todoList.admin.users.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;

    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;

    /** Updated todo item data */
    body: ITodoListTodos.IUpdate;
  };
  export type Body = ITodoListTodos.IUpdate;
  export type Response = ITodoListTodos;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/users/:userId/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodos => typia.random<ITodoListTodos>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a todo item for a user.
 *
 * This operation permanently removes the todo item from the database, ensuring
 * it cannot be recovered or accessed further.
 *
 * Access is restricted to the owner user or administrators. Unauthorized delete
 * attempts are denied.
 *
 * This operation corresponds to the todo_list_todos table in the Prisma schema
 * and enforces data integrity and authorization checks.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @param props.todoId Unique identifier of the target todo item
 * @path /todoList/admin/users/:userId/todos/:todoId
 * @accessor api.functional.todoList.admin.users.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;

    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/users/:userId/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
