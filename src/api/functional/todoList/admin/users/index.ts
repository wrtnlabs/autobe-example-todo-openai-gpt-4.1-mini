import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../../structures/ITodoListUser";
import { IPageITodoListUser } from "../../../../structures/IPageITodoListUser";
export * as todos from "./todos/index";

/**
 * Retrieve a paginated list of users.
 *
 * This operation allows retrieval of a filtered and paginated list of
 * authenticated users.
 *
 * The todo_list_user table contains user data including id, unique email,
 * password hash, and timestamps for creation, update, and deletion.
 *
 * Access is restricted to authenticated admin users due to the sensitivity of
 * user information.
 *
 * Clients can specify filtering criteria, sorting preferences, and pagination
 * controls in the request body.
 *
 * The operation returns user summaries containing essential user attributes
 * sufficient for listing purposes.
 *
 * Proper error handling ensures that unauthorized or malformed requests are
 * rejected with appropriate HTTP status codes.
 *
 * This endpoint supports administrative user management dashboards and tools.
 *
 * @param props.connection
 * @param props.body Request parameters for filtering, sorting, and pagination
 *   of users
 * @path /todoList/admin/users
 * @accessor api.functional.todoList.admin.users.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Request parameters for filtering, sorting, and pagination of users */
    body: ITodoListUser.IRequest;
  };
  export type Body = ITodoListUser.IRequest;
  export type Response = IPageITodoListUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/users";
  export const random = (): IPageITodoListUser.ISummary =>
    typia.random<IPageITodoListUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information of a specific user.
 *
 * Retrieves detailed information of a specific authenticated user identified by
 * their userId.
 *
 * The todo_list_user schema includes id, unique email, hashed password, and
 * timestamps for creation, update, and deletion.
 *
 * Access is restricted to 'admin' role to maintain security and privacy.
 *
 * The endpoint enforces validation of userId and returns appropriate errors
 * when the user does not exist or access is forbidden.
 *
 * Clients use this operation to view user details for administrative purposes.
 *
 * No request body is required, and response includes all user fields except
 * sensitive data not present in the schema.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @path /todoList/admin/users/:userId
 * @accessor api.functional.todoList.admin.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListUser;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoListUser => typia.random<ITodoListUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing user.
 *
 * Updates attributes of an existing user, identified by userId.
 *
 * The todo_list_user model includes email and password hash among other fields.
 *
 * This operation is restricted to admins due to security implications.
 *
 * It validates input data and enforces unique email constraints.
 *
 * The endpoint returns the updated user entity upon successful update.
 *
 * Clients use this to modify user details or reset passwords securely.
 *
 * Errors include validation failures, unauthorized access, and non-existent
 * users.
 *
 * Request body must contain valid update information.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @param props.body Update information for a user
 * @path /todoList/admin/users/:userId
 * @accessor api.functional.todoList.admin.users.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;

    /** Update information for a user */
    body: ITodoListUser.IUpdate;
  };
  export type Body = ITodoListUser.IUpdate;
  export type Response = ITodoListUser;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/users/:userId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoListUser => typia.random<ITodoListUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a user.
 *
 * Deletes a user by setting the deleted_at timestamp to mark as deleted.
 *
 * The todo_list_user table supports soft deletion, so this operation performs a
 * soft delete.
 *
 * Only users with the 'admin' role may execute this operation.
 *
 * This ensures users are not physically removed but marked deleted for
 * auditing.
 *
 * Attempts to delete non-existent users will respond with errors.
 *
 * Clients can use this to deactivate user accounts when needed, preserving data
 * integrity.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the target user
 * @path /todoList/admin/users/:userId
 * @accessor api.functional.todoList.admin.users.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target user */
    userId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
