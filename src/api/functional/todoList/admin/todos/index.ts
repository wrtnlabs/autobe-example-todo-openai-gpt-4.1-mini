import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodo } from "../../../../structures/ITodoListTodo";

/**
 * Retrieve details of a specific todo item by ID.
 *
 * This endpoint allows an authenticated user or administrator to retrieve
 * detailed information of a single todo item by its unique identifier.
 *
 * Access control ensures only the owner user or an admin can access the todo
 * details.
 *
 * The operation queries the todo_list_todos table which stores todo items
 * linked via todo_list_user_id to the owning user. It returns all relevant
 * fields including title, description, status, creation and modification
 * timestamps.
 *
 * If the todo item does not exist or the user lacks permission, a 404 or
 * authorization error is returned.
 *
 * This allows clients to display and manage the details of a specific todo
 * item.
 *
 * Related operations include listing todos, updating, and deleting them.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the target todo item
 * @path /todoList/admin/todos/:todoId
 * @accessor api.functional.todoList.admin.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing todo item by ID.
 *
 * This endpoint allows an authenticated user or administrator to update an
 * existing todo item by its unique ID.
 *
 * Only the owner of the todo or an admin can perform the update operation.
 *
 * The request body accepts updates to the title, description, and status fields
 * with validation rules:
 *
 * - Title must be unique per user and have a maximum length of 100 characters.
 * - Description is optional and limited to 500 characters.
 * - Status must be one of the allowed enum values: 'pending', 'in-progress', or
 *   'completed'.
 *
 * If any validation fails, an error is returned specifying the reason.
 *
 * If the user is unauthorized or the todo item does not exist, appropriate
 * authorization or not found errors are returned.
 *
 * Successful updates return the updated todo item details.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the target todo item
 * @param props.body Update data for the todo item
 * @path /todoList/admin/todos/:todoId
 * @accessor api.functional.todoList.admin.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target todo item */
    todoId: string & tags.Format<"uuid">;

    /** Update data for the todo item */
    body: ITodoListTodo.IUpdate;
  };
  export type Body = ITodoListTodo.IUpdate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a todo item by ID.
 *
 * This endpoint allows an authenticated user or administrator to delete a todo
 * item by its unique ID.
 *
 * Only the owner user or an admin is authorized to perform the deletion.
 *
 * The operation performs a hard delete on the todo_list_todos table,
 * permanently removing the record.
 *
 * If the todo item does not exist or the user is unauthorized, appropriate
 * errors are returned.
 *
 * Deleted todo items are no longer retrievable by any user.
 *
 * This operation complements the create, read, and update endpoints for full
 * lifecycle management.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo item to delete
 * @path /todoList/admin/todos/:todoId
 * @accessor api.functional.todoList.admin.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the todo item to delete */
    todoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
