import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListGuest } from "../../../../structures/ITodoListGuest";
import { IPageITodoListGuest } from "../../../../structures/IPageITodoListGuest";

/**
 * Search and retrieve a filtered, paginated list of todo_list_guest entities.
 *
 * Retrieve a filtered and paginated list of todo_list_guest entities. This
 * operation allows clients to query guests created in the system, including
 * their creation and update times.
 *
 * Guests represent unauthenticated users with minimal permissions. Only
 * authorized system users should access this data.
 *
 * The operation supports advanced pagination and filtering criteria, although
 * guests are mostly static entities.
 *
 * Security considerations include ensuring this data is only accessible to
 * authorized roles, given that guests are system actors rather than typical
 * users.
 *
 * This operation reads from the todo_list_guest table defined in the Prisma
 * schema. The response returns guest entities' details like id, timestamps, and
 * deletion status if applicable.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for
 *   todo_list_guest filtering
 * @path /todoList/admin/guests
 * @accessor api.functional.todoList.admin.guests.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search criteria and pagination parameters for todo_list_guest
     * filtering
     */
    body: ITodoListGuest.IRequest;
  };
  export type Body = ITodoListGuest.IRequest;
  export type Response = IPageITodoListGuest;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/guests";
  export const random = (): IPageITodoListGuest =>
    typia.random<IPageITodoListGuest>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information of a specific todo_list_guest.
 *
 * Retrieve detailed information about a todo_list_guest entity by its unique
 * identifier.
 *
 * The todo_list_guest entity represents unauthenticated users with minimal
 * permissions.
 *
 * Only authorized personnel should access guest details.
 *
 * The operation requires the guestId parameter, validated as a UUID, to
 * identify the target guest.
 *
 * This endpoint facilitates administrative review or system management tasks
 * involving guests.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the target guest
 * @path /todoList/admin/guests/:guestId
 * @accessor api.functional.todoList.admin.guests.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target guest */
    guestId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListGuest;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): ITodoListGuest => typia.random<ITodoListGuest>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing todo_list_guest entity with new values.
 *
 * Guests represent unauthenticated users with limited permissions. Updates are
 * restricted to authorized admin roles.
 *
 * The operation requires the guestId path parameter for identification and a
 * request body specifying updated fields.
 *
 * The updated entity is returned in the response upon success.
 *
 * This operation maps to the todo_list_guest table in the Prisma schema.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the target guest
 * @param props.body Updated values for the todo_list_guest entity
 * @path /todoList/admin/guests/:guestId
 * @accessor api.functional.todoList.admin.guests.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target guest */
    guestId: string & tags.Format<"uuid">;

    /** Updated values for the todo_list_guest entity */
    body: ITodoListGuest.IUpdate;
  };
  export type Body = ITodoListGuest.IUpdate;
  export type Response = ITodoListGuest;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/guests/:guestId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): ITodoListGuest => typia.random<ITodoListGuest>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a todo_list_guest entity permanently.
 *
 * Delete a todo_list_guest entity by its unique identifier.
 *
 * This is a hard delete removing the entity completely from the database.
 *
 * Only admin users are authorized to perform this action.
 *
 * The operation requires the guestId path parameter as identification.
 *
 * Upon successful deletion, the entity is no longer retrievable in the system.
 *
 * @param props.connection
 * @param props.guestId Unique identifier of the target guest
 * @path /todoList/admin/guests/:guestId
 * @accessor api.functional.todoList.admin.guests.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target guest */
    guestId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/guests/:guestId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/guests/${encodeURIComponent(props.guestId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("guestId")(() => typia.assert(props.guestId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
