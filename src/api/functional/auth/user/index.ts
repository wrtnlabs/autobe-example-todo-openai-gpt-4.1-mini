import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAppUser } from "../../../structures/ITodoListAppUser";

/**
 * Register new user for todo_list_app_users table.
 *
 * Registers a new user account for the 'user' role in the todoListApp backend.
 * Validates email and password, stores user with hashed password and unverified
 * email status. On success, issues JWT access and refresh tokens. This
 * operation targets the todo_list_app_users table representing user accounts.
 * It manages creation timestamps and enforces email uniqueness. This endpoint
 * uses the 'join' authorization type indicating user registration. Validation
 * of email format and password policies are enforced at the application layer
 * before calling. Returns an authorized user response type
 * ITodoListAppUser.IAuthorized.
 *
 * @param props.connection
 * @param props.body User registration data including email and password,
 *   encapsulated in ITodoListAppUser.ICreate.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @accessor api.functional.auth.user.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * User registration data including email and password, encapsulated in
     * ITodoListAppUser.ICreate.
     */
    body: ITodoListAppUser.ICreate;
  };
  export type Body = ITodoListAppUser.ICreate;
  export type Response = ITodoListAppUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): ITodoListAppUser.IAuthorized =>
    typia.random<ITodoListAppUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * User login for todo_list_app_users table.
 *
 * Authenticates an existing user by verifying email and password for the 'user'
 * role in todoListApp. Validates credentials against stored password hash and
 * email verification status. Issues JWT access and refresh tokens upon
 * successful login. Relies on todo_list_app_users table with unique email and
 * password_hash fields. Ensures user is not soft deleted and has verified
 * email. Uses 'login' authorization type as a secure authentication entry
 * point. Returns authorized user response ITodoListAppUser.IAuthorized.
 *
 * @param props.connection
 * @param props.body Login credentials including email and password, defined in
 *   ITodoListAppUser.ILogin.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @accessor api.functional.auth.user.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Login credentials including email and password, defined in
     * ITodoListAppUser.ILogin.
     */
    body: ITodoListAppUser.ILogin;
  };
  export type Body = ITodoListAppUser.ILogin;
  export type Response = ITodoListAppUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): ITodoListAppUser.IAuthorized =>
    typia.random<ITodoListAppUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT token for todo_list_app_users table.
 *
 * Refreshes JWT access token for the 'user' role using a valid refresh token.
 * Ensures continuous authenticated session without user re-login. Relies on the
 * todo_list_app_users table to validate user existence, email verification
 * status, and account state. Uses 'refresh' authorization type indicating token
 * renewal. Returns authorized user response ITodoListAppUser.IAuthorized with
 * new tokens.
 *
 * @param props.connection
 * @param props.body Refresh token request data containing the refresh token,
 *   defined in ITodoListAppUser.IRefresh.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @accessor api.functional.auth.user.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh token request data containing the refresh token, defined in
     * ITodoListAppUser.IRefresh.
     */
    body: ITodoListAppUser.IRefresh;
  };
  export type Body = ITodoListAppUser.IRefresh;
  export type Response = ITodoListAppUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): ITodoListAppUser.IAuthorized =>
    typia.random<ITodoListAppUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
