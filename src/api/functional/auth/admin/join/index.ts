import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAdmin } from "../../../../structures/ITodoListAdmin";

/**
 * Create administrator account in todo_list_admin.
 *
 * Create a new administrator account in the todo_list_admin table. Requires
 * providing email and password to create account credentials. The
 * todo_list_admin table enforces unique email to prevent duplicates. Upon
 * success, the system generates initial JWT access and refresh tokens allowing
 * secure access. Creation and update timestamps are recorded automatically.
 * This operation supports administrators with full system privileges,
 * consistent with the admin role's business purpose.
 *
 * @param props.connection
 * @param props.body Admin registration info
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join.joinAdmin
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinAdmin(
  connection: IConnection,
  props: joinAdmin.Props,
): Promise<joinAdmin.Response> {
  const output: joinAdmin.Response =
    true === connection.simulate
      ? joinAdmin.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinAdmin.METADATA,
            path: joinAdmin.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinAdmin {
  export type Props = {
    /** Admin registration info */
    body: ITodoListAdmin.ICreate;
  };
  export type Body = ITodoListAdmin.ICreate;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: joinAdmin.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: joinAdmin.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
