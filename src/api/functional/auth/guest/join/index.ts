import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ITodoListGuest } from "../../../../structures/ITodoListGuest";

/**
 * Create a temporary guest account with JWT tokens for limited access.
 *
 * This API operation enables the creation of a new guest account in the
 * todo_list_guest table. Guest users do not authenticate with email or password
 * but can gain temporary authenticated access via this endpoint.
 *
 * The operation manages creation timestamps (created_at, updated_at)
 * automatically by the backend. The soft delete is represented by deleted_at
 * but the operation focuses on account creation.
 *
 * Guest users have limited permissions and cannot perform login; hence, the
 * login API is not provided for guests.
 *
 * This operation is publicly accessible without prior authentication and issues
 * temporary tokens upon account creation.
 *
 * Related operations include token refresh via /auth/guest/refresh for issuing
 * new access tokens after expiration.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join.joinGuest
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function joinGuest(
  connection: IConnection,
): Promise<joinGuest.Response> {
  const output: joinGuest.Response =
    true === connection.simulate
      ? joinGuest.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...joinGuest.METADATA,
            path: joinGuest.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace joinGuest {
  export type Response = ITodoListGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): ITodoListGuest.IAuthorized =>
    typia.random<ITodoListGuest.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
