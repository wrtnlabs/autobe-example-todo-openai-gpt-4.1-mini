import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthUserJoin } from "../../../providers/postAuthUserJoin";
import { UserAuth } from "../../../decorators/UserAuth";
import { UserPayload } from "../../../decorators/payload/UserPayload";
import { postAuthUserLogin } from "../../../providers/postAuthUserLogin";
import { postAuthUserRefresh } from "../../../providers/postAuthUserRefresh";

import { ITodoListAppUser } from "../../../api/structures/ITodoListAppUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * Register new user for todo_list_app_users table.
   *
   * Registers a new user account for the 'user' role in the todoListApp
   * backend. Validates email and password, stores user with hashed password and
   * unverified email status. On success, issues JWT access and refresh tokens.
   * This operation targets the todo_list_app_users table representing user
   * accounts. It manages creation timestamps and enforces email uniqueness.
   * This endpoint uses the 'join' authorization type indicating user
   * registration. Validation of email format and password policies are enforced
   * at the application layer before calling. Returns an authorized user
   * response type ITodoListAppUser.IAuthorized.
   *
   * @param connection
   * @param body User registration data including email and password,
   *   encapsulated in ITodoListAppUser.ICreate.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListAppUser.ICreate,
  ): Promise<ITodoListAppUser.IAuthorized> {
    try {
      return await postAuthUserJoin({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * User login for todo_list_app_users table.
   *
   * Authenticates an existing user by verifying email and password for the
   * 'user' role in todoListApp. Validates credentials against stored password
   * hash and email verification status. Issues JWT access and refresh tokens
   * upon successful login. Relies on todo_list_app_users table with unique
   * email and password_hash fields. Ensures user is not soft deleted and has
   * verified email. Uses 'login' authorization type as a secure authentication
   * entry point. Returns authorized user response
   * ITodoListAppUser.IAuthorized.
   *
   * @param connection
   * @param body Login credentials including email and password, defined in
   *   ITodoListAppUser.ILogin.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListAppUser.ILogin,
  ): Promise<ITodoListAppUser.IAuthorized> {
    try {
      return await postAuthUserLogin({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT token for todo_list_app_users table.
   *
   * Refreshes JWT access token for the 'user' role using a valid refresh token.
   * Ensures continuous authenticated session without user re-login. Relies on
   * the todo_list_app_users table to validate user existence, email
   * verification status, and account state. Uses 'refresh' authorization type
   * indicating token renewal. Returns authorized user response
   * ITodoListAppUser.IAuthorized with new tokens.
   *
   * @param connection
   * @param body Refresh token request data containing the refresh token,
   *   defined in ITodoListAppUser.IRefresh.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListAppUser.IRefresh,
  ): Promise<ITodoListAppUser.IAuthorized> {
    try {
      return await postAuthUserRefresh({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
