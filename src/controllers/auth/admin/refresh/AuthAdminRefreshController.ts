import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminRefresh } from "../../../../providers/postauthAdminRefresh";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ITodoListAdmin } from "../../../../api/structures/ITodoListAdmin";

@Controller("/auth/admin/refresh")
export class AuthAdminRefreshController {
  /**
   * Refresh administrator tokens.
   *
   * Refresh JWT access and refresh tokens for an authenticated administrator
   * using a valid refresh token. Ensures continuous secure access without
   * requiring re-login. This endpoint requires a valid refresh token in the
   * request and responds with new JWT tokens for continued access to
   * administrative capabilities.
   *
   * @param connection
   * @param body Admin token refresh request
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshAdmin(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.IRefresh,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
