import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminLogin } from "../../../../providers/postauthAdminLogin";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ITodoListAdmin } from "../../../../api/structures/ITodoListAdmin";

@Controller("/auth/admin/login")
export class AuthAdminLoginController {
  /**
   * Authenticate administrator login.
   *
   * Authenticate administrator using email and password credentials stored
   * securely in todo_list_admin. Returns JWT access and refresh tokens if
   * credentials are valid. The system enforces unique email addresses and
   * password hashes for authentication. This login is essential for admin users
   * to securely access all system functions. The endpoint accepts email and
   * password in the request body and returns authorized tokens for subsequent
   * requests.
   *
   * @param connection
   * @param body Admin login credentials
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async loginAdmin(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.ILogin,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
