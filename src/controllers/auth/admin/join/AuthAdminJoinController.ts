import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../../providers/postauthAdminJoin";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { ITodoListAdmin } from "../../../../api/structures/ITodoListAdmin";

@Controller("/auth/admin/join")
export class AuthAdminJoinController {
  /**
   * Create administrator account in todo_list_admin.
   *
   * Create a new administrator account in the todo_list_admin table. Requires
   * providing email and password to create account credentials. The
   * todo_list_admin table enforces unique email to prevent duplicates. Upon
   * success, the system generates initial JWT access and refresh tokens
   * allowing secure access. Creation and update timestamps are recorded
   * automatically. This operation supports administrators with full system
   * privileges, consistent with the admin role's business purpose.
   *
   * @param connection
   * @param body Admin registration info
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinAdmin(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.ICreate,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
