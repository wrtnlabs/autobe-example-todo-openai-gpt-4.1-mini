import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthGuestRefresh } from "../../../../providers/postauthGuestRefresh";

import { ITodoListGuest } from "../../../../api/structures/ITodoListGuest";

@Controller("/auth/guest/refresh")
export class AuthGuestRefreshController {
  /**
   * Refresh JWT tokens for a guest user using a refresh token.
   *
   * This operation allows a guest user to refresh JWT tokens using a valid
   * refresh token. It requires a previously issued refresh token to extend
   * session duration.
   *
   * Since guests cannot log in, this endpoint is essential for maintaining
   * temporary authenticated sessions.
   *
   * Soft delete field deleted_at indicates guest account status but does not
   * block token refresh if the account is active.
   *
   * Related operations: /auth/guest/join to create initial tokens,
   * /auth/guest/login is not applicable.
   *
   * @param connection
   * @param body Refresh token payload for guests
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refreshGuest(
    @TypedBody()
    body: ITodoListGuest.IRefresh,
  ): Promise<ITodoListGuest.IAuthorized> {
    try {
      return await postauthGuestRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
