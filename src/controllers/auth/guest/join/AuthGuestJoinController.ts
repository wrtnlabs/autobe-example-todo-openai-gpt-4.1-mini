import { Controller } from "@nestjs/common";
import { TypedRoute } from "@nestia/core";
import typia from "typia";
import { postauthGuestJoin } from "../../../../providers/postauthGuestJoin";

import { ITodoListGuest } from "../../../../api/structures/ITodoListGuest";

@Controller("/auth/guest/join")
export class AuthGuestJoinController {
  /**
   * Create a temporary guest account with JWT tokens for limited access.
   *
   * This API operation enables the creation of a new guest account in the
   * todo_list_guest table. Guest users do not authenticate with email or
   * password but can gain temporary authenticated access via this endpoint.
   *
   * The operation manages creation timestamps (created_at, updated_at)
   * automatically by the backend. The soft delete is represented by deleted_at
   * but the operation focuses on account creation.
   *
   * Guest users have limited permissions and cannot perform login; hence, the
   * login API is not provided for guests.
   *
   * This operation is publicly accessible without prior authentication and
   * issues temporary tokens upon account creation.
   *
   * Related operations include token refresh via /auth/guest/refresh for
   * issuing new access tokens after expiration.
   *
   * @param connection
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async joinGuest(): Promise<ITodoListGuest.IAuthorized> {
    try {
      return await postauthGuestJoin();
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
