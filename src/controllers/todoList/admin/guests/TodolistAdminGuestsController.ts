import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListAdminGuests } from "../../../../providers/patchtodoListAdminGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { gettodoListAdminGuestsGuestId } from "../../../../providers/gettodoListAdminGuestsGuestId";
import { puttodoListAdminGuestsGuestId } from "../../../../providers/puttodoListAdminGuestsGuestId";
import { deletetodoListAdminGuestsGuestId } from "../../../../providers/deletetodoListAdminGuestsGuestId";

import { IPageITodoListGuest } from "../../../../api/structures/IPageITodoListGuest";
import { ITodoListGuest } from "../../../../api/structures/ITodoListGuest";

@Controller("/todoList/admin/guests")
export class TodolistAdminGuestsController {
  /**
   * Search and retrieve a filtered, paginated list of todo_list_guest entities.
   *
   * Retrieve a filtered and paginated list of todo_list_guest entities. This
   * operation allows clients to query guests created in the system, including
   * their creation and update times.
   *
   * Guests represent unauthenticated users with minimal permissions. Only
   * authorized system users should access this data.
   *
   * The operation supports advanced pagination and filtering criteria, although
   * guests are mostly static entities.
   *
   * Security considerations include ensuring this data is only accessible to
   * authorized roles, given that guests are system actors rather than typical
   * users.
   *
   * This operation reads from the todo_list_guest table defined in the Prisma
   * schema. The response returns guest entities' details like id, timestamps,
   * and deletion status if applicable.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for todo_list_guest
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListGuest.IRequest,
  ): Promise<IPageITodoListGuest> {
    try {
      return await patchtodoListAdminGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information of a specific todo_list_guest.
   *
   * Retrieve detailed information about a todo_list_guest entity by its unique
   * identifier.
   *
   * The todo_list_guest entity represents unauthenticated users with minimal
   * permissions.
   *
   * Only authorized personnel should access guest details.
   *
   * The operation requires the guestId parameter, validated as a UUID, to
   * identify the target guest.
   *
   * This endpoint facilitates administrative review or system management tasks
   * involving guests.
   *
   * @param connection
   * @param guestId Unique identifier of the target guest
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":guestId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<ITodoListGuest> {
    try {
      return await gettodoListAdminGuestsGuestId({
        admin,
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing todo_list_guest entity with new values.
   *
   * Guests represent unauthenticated users with limited permissions. Updates
   * are restricted to authorized admin roles.
   *
   * The operation requires the guestId path parameter for identification and a
   * request body specifying updated fields.
   *
   * The updated entity is returned in the response upon success.
   *
   * This operation maps to the todo_list_guest table in the Prisma schema.
   *
   * @param connection
   * @param guestId Unique identifier of the target guest
   * @param body Updated values for the todo_list_guest entity
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":guestId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListGuest.IUpdate,
  ): Promise<ITodoListGuest> {
    try {
      return await puttodoListAdminGuestsGuestId({
        admin,
        guestId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a todo_list_guest entity permanently.
   *
   * Delete a todo_list_guest entity by its unique identifier.
   *
   * This is a hard delete removing the entity completely from the database.
   *
   * Only admin users are authorized to perform this action.
   *
   * The operation requires the guestId path parameter as identification.
   *
   * Upon successful deletion, the entity is no longer retrievable in the
   * system.
   *
   * @param connection
   * @param guestId Unique identifier of the target guest
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":guestId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("guestId")
    guestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetodoListAdminGuestsGuestId({
        admin,
        guestId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
