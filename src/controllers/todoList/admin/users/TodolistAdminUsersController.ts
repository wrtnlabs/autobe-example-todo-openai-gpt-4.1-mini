import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListAdminUsers } from "../../../../providers/patchtodoListAdminUsers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { gettodoListAdminUsersUserId } from "../../../../providers/gettodoListAdminUsersUserId";
import { puttodoListAdminUsersUserId } from "../../../../providers/puttodoListAdminUsersUserId";
import { deletetodoListAdminUsersUserId } from "../../../../providers/deletetodoListAdminUsersUserId";

import { IPageITodoListUser } from "../../../../api/structures/IPageITodoListUser";
import { ITodoListUser } from "../../../../api/structures/ITodoListUser";

@Controller("/todoList/admin/users")
export class TodolistAdminUsersController {
  /**
   * Retrieve a paginated list of users.
   *
   * This operation allows retrieval of a filtered and paginated list of
   * authenticated users.
   *
   * The todo_list_user table contains user data including id, unique email,
   * password hash, and timestamps for creation, update, and deletion.
   *
   * Access is restricted to authenticated admin users due to the sensitivity of
   * user information.
   *
   * Clients can specify filtering criteria, sorting preferences, and pagination
   * controls in the request body.
   *
   * The operation returns user summaries containing essential user attributes
   * sufficient for listing purposes.
   *
   * Proper error handling ensures that unauthorized or malformed requests are
   * rejected with appropriate HTTP status codes.
   *
   * This endpoint supports administrative user management dashboards and tools.
   *
   * @param connection
   * @param body Request parameters for filtering, sorting, and pagination of
   *   users
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListUser.IRequest,
  ): Promise<IPageITodoListUser.ISummary> {
    try {
      return await patchtodoListAdminUsers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information of a specific user.
   *
   * Retrieves detailed information of a specific authenticated user identified
   * by their userId.
   *
   * The todo_list_user schema includes id, unique email, hashed password, and
   * timestamps for creation, update, and deletion.
   *
   * Access is restricted to 'admin' role to maintain security and privacy.
   *
   * The endpoint enforces validation of userId and returns appropriate errors
   * when the user does not exist or access is forbidden.
   *
   * Clients use this operation to view user details for administrative
   * purposes.
   *
   * No request body is required, and response includes all user fields except
   * sensitive data not present in the schema.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoListUser> {
    try {
      return await gettodoListAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing user.
   *
   * Updates attributes of an existing user, identified by userId.
   *
   * The todo_list_user model includes email and password hash among other
   * fields.
   *
   * This operation is restricted to admins due to security implications.
   *
   * It validates input data and enforces unique email constraints.
   *
   * The endpoint returns the updated user entity upon successful update.
   *
   * Clients use this to modify user details or reset passwords securely.
   *
   * Errors include validation failures, unauthorized access, and non-existent
   * users.
   *
   * Request body must contain valid update information.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @param body Update information for a user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListUser.IUpdate,
  ): Promise<ITodoListUser> {
    try {
      return await puttodoListAdminUsersUserId({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a user.
   *
   * Deletes a user by setting the deleted_at timestamp to mark as deleted.
   *
   * The todo_list_user table supports soft deletion, so this operation performs
   * a soft delete.
   *
   * Only users with the 'admin' role may execute this operation.
   *
   * This ensures users are not physically removed but marked deleted for
   * auditing.
   *
   * Attempts to delete non-existent users will respond with errors.
   *
   * Clients can use this to deactivate user accounts when needed, preserving
   * data integrity.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetodoListAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
