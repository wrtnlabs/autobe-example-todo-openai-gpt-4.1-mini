import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListUserUsersUserIdTodos } from "../../../../../providers/patchtodoListUserUsersUserIdTodos";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { gettodoListUserUsersUserIdTodosTodoId } from "../../../../../providers/gettodoListUserUsersUserIdTodosTodoId";
import { puttodoListUserUsersUserIdTodosTodoId } from "../../../../../providers/puttodoListUserUsersUserIdTodosTodoId";
import { deletetodoListUserUsersUserIdTodosTodoId } from "../../../../../providers/deletetodoListUserUsersUserIdTodosTodoId";

import { IPageITodoListTodos } from "../../../../../api/structures/IPageITodoListTodos";
import { ITodoListTodos } from "../../../../../api/structures/ITodoListTodos";

@Controller("/todoList/user/users/:userId/todos")
export class TodolistUserUsersTodosController {
  /**
   * List and search todo items for a specific user.
   *
   * Retrieve a filtered, sorted, and paginated list of todo items for a
   * specified user.
   *
   * This operation accepts search parameters to filter todo items by status
   * (pending, in-progress, completed) and supports pagination and sorting by
   * creation timestamp or other relevant fields.
   *
   * Authorization is required; only the authenticated user or an admin can
   * retrieve this user's todos. The returned todo items include title,
   * description, status, and timestamps, reflecting data from the
   * todo_list_todos table.
   *
   * This endpoint corresponds to the todo_list_todos table in the Prisma
   * schema, linked to todo_list_user via the user ID foreign key. It enforces
   * that only todos for the given userId are returned.
   *
   * Errors occur if the user does not exist or if unauthorized access is
   * attempted.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @param body Search and pagination parameters to filter todos by status
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodos.IRequest,
  ): Promise<IPageITodoListTodos> {
    try {
      return await patchtodoListUserUsersUserIdTodos({
        user,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific todo item for a user.
   *
   * Retrieve detailed information for a specific todo item belonging to a
   * specified user.
   *
   * This endpoint returns the full data of the todo item including its title,
   * description, and current status.
   *
   * Access is restricted to the owner user or administrators. Unauthorized
   * requests are denied with appropriate error messages.
   *
   * This operation directly maps to the todo_list_todos table in the Prisma
   * schema and enforces ownership checks based on the userId parameter.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @param todoId Unique identifier of the target todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":todoId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTodos> {
    try {
      return await gettodoListUserUsersUserIdTodosTodoId({
        user,
        userId,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a todo item for a user.
   *
   * Update an existing todo item for a user.
   *
   * This operation allows modifying the title, description, and status of the
   * todo item. The title must be unique per user, non-empty, and under 100
   * characters. The description may be updated up to 500 characters.
   *
   * The status must be one of 'pending', 'in-progress', or 'completed'.
   * Attempts to update status to invalid values will be rejected.
   *
   * Access control restricts this operation to the todo owner or admins only.
   *
   * This endpoint corresponds to the todo_list_todos table in the Prisma
   * schema.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @param todoId Unique identifier of the target todo item
   * @param body Updated todo item data
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":todoId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodos.IUpdate,
  ): Promise<ITodoListTodos> {
    try {
      return await puttodoListUserUsersUserIdTodosTodoId({
        user,
        userId,
        todoId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a todo item for a user.
   *
   * This operation permanently removes the todo item from the database,
   * ensuring it cannot be recovered or accessed further.
   *
   * Access is restricted to the owner user or administrators. Unauthorized
   * delete attempts are denied.
   *
   * This operation corresponds to the todo_list_todos table in the Prisma
   * schema and enforces data integrity and authorization checks.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @param todoId Unique identifier of the target todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":todoId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetodoListUserUsersUserIdTodosTodoId({
        user,
        userId,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
