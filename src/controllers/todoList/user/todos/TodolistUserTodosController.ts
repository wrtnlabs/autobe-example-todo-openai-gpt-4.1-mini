import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListUserTodos } from "../../../../providers/patchtodoListUserTodos";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { gettodoListUserTodosTodoId } from "../../../../providers/gettodoListUserTodosTodoId";
import { puttodoListUserTodosTodoId } from "../../../../providers/puttodoListUserTodosTodoId";
import { deletetodoListUserTodosTodoId } from "../../../../providers/deletetodoListUserTodosTodoId";

import { IPageITodoListTodo } from "../../../../api/structures/IPageITodoListTodo";
import { ITodoListTodo } from "../../../../api/structures/ITodoListTodo";

@Controller("/todoList/user/todos")
export class TodolistUserTodosController {
  /**
   * Retrieve a filtered and paginated list of todo items owned by the user.
   *
   * This endpoint allows an authenticated user to search and retrieve their
   * todo items with optional status filtering and pagination.
   *
   * Access is restricted to authenticated users only; guests and unauthorized
   * users are denied access.
   *
   * It operates on the todo_list_todos table defined in the Prisma schema,
   * which stores todo items including title, optional description, status,
   * timestamps, and ownership linkage to users.
   *
   * The operation enforces business rules such as returning only todos owned by
   * the authenticated user and applying filters and sorting based on request
   * parameters.
   *
   * The response contains a paginated list of todo item summaries optimized for
   * display purposes. Errors include authorization failures or invalid search
   * criteria.
   *
   * Related operations include retrieval of single todo details, creation,
   * update, and deletion of todos.
   *
   * Expected behavior includes correct handling of pagination parameters and
   * filters with efficient indexing as defined in the schema.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for todo filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTodo.IRequest,
  ): Promise<IPageITodoListTodo.ISummary> {
    try {
      return await patchtodoListUserTodos({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific todo item by ID.
   *
   * This endpoint allows an authenticated user or administrator to retrieve
   * detailed information of a single todo item by its unique identifier.
   *
   * Access control ensures only the owner user or an admin can access the todo
   * details.
   *
   * The operation queries the todo_list_todos table which stores todo items
   * linked via todo_list_user_id to the owning user. It returns all relevant
   * fields including title, description, status, creation and modification
   * timestamps.
   *
   * If the todo item does not exist or the user lacks permission, a 404 or
   * authorization error is returned.
   *
   * This allows clients to display and manage the details of a specific todo
   * item.
   *
   * Related operations include listing todos, updating, and deleting them.
   *
   * @param connection
   * @param todoId Unique identifier of the target todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":todoId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTodo> {
    try {
      return await gettodoListUserTodosTodoId({
        user,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing todo item by ID.
   *
   * This endpoint allows an authenticated user or administrator to update an
   * existing todo item by its unique ID.
   *
   * Only the owner of the todo or an admin can perform the update operation.
   *
   * The request body accepts updates to the title, description, and status
   * fields with validation rules:
   *
   * - Title must be unique per user and have a maximum length of 100 characters.
   * - Description is optional and limited to 500 characters.
   * - Status must be one of the allowed enum values: 'pending', 'in-progress', or
   *   'completed'.
   *
   * If any validation fails, an error is returned specifying the reason.
   *
   * If the user is unauthorized or the todo item does not exist, appropriate
   * authorization or not found errors are returned.
   *
   * Successful updates return the updated todo item details.
   *
   * @param connection
   * @param todoId Unique identifier of the target todo item
   * @param body Update data for the todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":todoId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodo.IUpdate,
  ): Promise<ITodoListTodo> {
    try {
      return await puttodoListUserTodosTodoId({
        user,
        todoId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a todo item by ID.
   *
   * This endpoint allows an authenticated user or administrator to delete a
   * todo item by its unique ID.
   *
   * Only the owner user or an admin is authorized to perform the deletion.
   *
   * The operation performs a hard delete on the todo_list_todos table,
   * permanently removing the record.
   *
   * If the todo item does not exist or the user is unauthorized, appropriate
   * errors are returned.
   *
   * Deleted todo items are no longer retrievable by any user.
   *
   * This operation complements the create, read, and update endpoints for full
   * lifecycle management.
   *
   * @param connection
   * @param todoId Unique identifier of the todo item to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":todoId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetodoListUserTodosTodoId({
        user,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
