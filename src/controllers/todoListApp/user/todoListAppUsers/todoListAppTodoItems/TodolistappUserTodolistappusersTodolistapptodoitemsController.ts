import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItems } from "../../../../../providers/postTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItems";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { patchTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItems } from "../../../../../providers/patchTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItems";
import { getTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId } from "../../../../../providers/getTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId";
import { putTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId } from "../../../../../providers/putTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId";
import { deleteTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId } from "../../../../../providers/deleteTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId";

import { ITodoListAppTodoItem } from "../../../../../api/structures/ITodoListAppTodoItem";
import { IPageITodoListAppTodoItem } from "../../../../../api/structures/IPageITodoListAppTodoItem";

@Controller(
  "/todoListApp/user/todoListAppUsers/:todoListAppUserId/todoListAppTodoItems",
)
export class TodolistappUserTodolistappusersTodolistapptodoitemsController {
  /**
   * Create a new todo item for a user.
   *
   * Creates a new todo item owned by the specified user. The description must
   * be non-empty and at most 256 characters. Status must be either 'pending' or
   * 'done', typically 'pending' at creation. The item is uniquely identified
   * and timestamps for creation and last update are recorded.
   *
   * Only the authenticated user owning the specified user ID may perform this
   * operation. The system enforces ownership and validates input values.
   *
   * The operation relates to the todo_list_app_todo_items table in the Prisma
   * schema. It references todo_list_app_users via the foreign key
   * todo_list_app_user_id. The response entity contains all standard todo item
   * fields.
   *
   * Errors may occur if the description is invalid, if the status is not
   * recognized, or if authorization fails.
   *
   * Client must supply the user ID in the path and a valid request body
   * matching the ITodoListAppTodoItem.ICreate schema.
   *
   * Related operations include retrieving the todo items list, updating
   * existing items, and deleting items.
   *
   * @param connection
   * @param todoListAppUserId Unique identifier of the owning todo list app user
   * @param body Creation info of the todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoListAppUserId")
    todoListAppUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListAppTodoItem.ICreate,
  ): Promise<ITodoListAppTodoItem> {
    try {
      return await postTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItems(
        {
          user,
          todoListAppUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered and paginated list of todo items for a user.
   *
   * Retrieve a filtered and paginated list of todo items owned by the user
   * identified by {todoListAppUserId}. This supports searching, sorting, and
   * paging to optimize task management.
   *
   * This operation enforces ownership, meaning users can only retrieve their
   * own tasks. It interacts with the todo_list_app_todo_items table, which
   * stores task descriptions, statuses (only "pending" or "done"), and
   * timestamps.
   *
   * Security measures ensure the requesting user is authenticated and
   * authorized to view only their own tasks. Validation of the
   * {todoListAppUserId} as a UUID is performed. The response includes task
   * summary details with pagination data.
   *
   * Typical usage includes client applications requesting the current user's
   * task list with filter criteria, page size, and sort order.
   *
   * Errors include authorization failures if attempting to access other users'
   * tasks and proper handling of invalid request parameters or server errors.
   *
   * @param connection
   * @param todoListAppUserId Identifier of the user owning the todo items
   * @param body Search criteria and pagination parameters for todo items
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoListAppUserId")
    todoListAppUserId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListAppTodoItem.IRequest,
  ): Promise<IPageITodoListAppTodoItem.ISummary> {
    try {
      return await patchTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItems(
        {
          user,
          todoListAppUserId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific todo item owned by a user.
   *
   * Retrieve detailed information about a specific todo item owned by the user
   * identified by {todoListAppUserId} and the todo item identified by {id}.
   *
   * Only the owning user is authorized to access this data. The todo item
   * includes fields for description, status ("pending" or "done"), creation,
   * and update timestamps.
   *
   * This operation requires validation of both path parameters as UUIDs and
   * enforces strict ownership checking.
   *
   * Common errors are authorization failure if the item belongs to another
   * user, and not found if the item does not exist.
   *
   * The response provides full task details for client applications requiring
   * display or editing functionality.
   *
   * @param connection
   * @param todoListAppUserId Unique identifier of the user owning the todo item
   * @param id Unique identifier of the todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoListAppUserId")
    todoListAppUserId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<ITodoListAppTodoItem> {
    try {
      return await getTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId(
        {
          user,
          todoListAppUserId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing todo item.
   *
   * Updates an existing todo item owned by the specified user. Description
   * changes are allowed only if the item is currently 'pending'. Status can be
   * updated to 'done' or 'pending'.
   *
   * The operation verifies user ownership and validates the description length
   * and status value.
   *
   * This operation manipulates the todo_list_app_todo_items DB table and
   * relates to todo_list_app_users for ownership.
   *
   * Request must include user ID and todo item ID in path and request body with
   * updated fields matching ITodoListAppTodoItem.IUpdate.
   *
   * Errors returned include authorization failure, validation errors, or item
   * not found errors.
   *
   * This complements the create and delete operations for managing todo items.
   *
   * @param connection
   * @param todoListAppUserId Unique identifier of the owning todo list app user
   * @param id Unique identifier of the todo item
   * @param body Updated data for the todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoListAppUserId")
    todoListAppUserId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListAppTodoItem.IUpdate,
  ): Promise<ITodoListAppTodoItem> {
    try {
      return await putTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId(
        {
          user,
          todoListAppUserId,
          id,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a todo item permanently.
   *
   * Deletes a todo item owned by the specified user. This operation permanently
   * removes the record from the database.
   *
   * It verifies ownership and returns no response content.
   *
   * The todo_list_app_todo_items schema does not support soft delete, so this
   * is a hard delete.
   *
   * Errors include authorization failure or item not found.
   *
   * Client must provide user ID and todo item ID in the path.
   *
   * Related operations include creating, updating, and retrieving todo items.
   *
   * @param connection
   * @param todoListAppUserId Unique identifier of the owning todo list app user
   * @param id Unique identifier of the todo item
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":id")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoListAppUserId")
    todoListAppUserId: string & tags.Format<"uuid">,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListAppUserTodoListAppUsersTodoListAppUserIdTodoListAppTodoItemsId(
        {
          user,
          todoListAppUserId,
          id,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
