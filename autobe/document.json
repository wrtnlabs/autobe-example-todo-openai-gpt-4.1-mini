{"operations":[{"specification":"This API operation handles user registration (joining) for the 'user' role in the todoListApp system. It creates a new user account with email and password, ensuring the user is stored in the todo_list_app_users table. The required fields for creation are email, password_hash, email_verified (initially false), and timestamps for created_at and updated_at. The operation returns authorized user info with JWT tokens as per authentication standards. The operation is public (no authentication required), allowing new users to sign up. It enforces password policies and unique email addresses as per business rules. This endpoint uses the 'join' authorization type and corresponds to the 'todo_list_app_users' table representing user accounts. The operation schema maps to ITodoListAppUser.ICreate request body and returns an ITodoListAppUser.IAuthorized response body containing authorized user info with tokens. Recommended path is '/auth/user/join', method POST, matching RESTful conventions.\n\n-- Detailed Description --\nThe 'join' operation allows a new user to register an account with their email and password. The Prisma schema todo_list_app_users includes fields to support email verification (email_verified), password hashing (password_hash), and soft deletion (deleted_at). This operation requires creating a new entry with email, password_hash and sets email_verified to false initially. The system tracks creation and update timestamps. Email uniqueness and password strength are enforced as project policies outside this API spec but should be validated before calling this endpoint. On successful registration, the operation returns authorization tokens encapsulated in ITodoListAppUser.IAuthorized, enabling immediate authenticated interaction with the todo list app.\n\nBecause the user is of kind 'member', the operation also supports login and token refresh endpoints as essential auth operations.\n\nSecurity considerations ensure the password is never stored or returned in plain text; only hashed passwords are accepted and stored. The operation clearly separates registration from login, enhancing security and user management.\n\nLogin and refresh operations complement this join endpoint in a full authentication flow.","authorizationType":"join","description":"Registers a new user account for the 'user' role in the todoListApp backend. Validates email and password, stores user with hashed password and unverified email status. On success, issues JWT access and refresh tokens. This operation targets the todo_list_app_users table representing user accounts. It manages creation timestamps and enforces email uniqueness. This endpoint uses the 'join' authorization type indicating user registration. Validation of email format and password policies are enforced at the application layer before calling. Returns an authorized user response type ITodoListAppUser.IAuthorized.","summary":"Register new user for todo_list_app_users table","parameters":[],"requestBody":{"description":"User registration data including email and password, encapsulated in ITodoListAppUser.ICreate.","typeName":"ITodoListAppUser.ICreate"},"responseBody":{"description":"Authorized user data with JWT tokens after successful registration.","typeName":"ITodoListAppUser.IAuthorized"},"authorizationRole":"user","name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"This API operation handles user login for the 'user' role in the todoListApp system, authenticating a user by verifying the email and password against stored credentials in the todo_list_app_users table. It returns JWT access and refresh tokens encapsulated in the ITodoListAppUser.IAuthorized response type. The operation is public and uses the 'login' authorization type. The endpoint follows RESTful conventions with path '/auth/user/login' and method POST.\n\n-- Detailed Description --\nLogin verifies the user's credentials by checking the email against a unique email field in the todo_list_app_users table and validating the provided password against the stored password_hash. The user must have a verified email (email_verified=true) and no deleted_at timestamp to be allowed to login. If these conditions are met and the password matches, JWT tokens are issued for session management.\n\nSecurity considerations ensure no plain text password is stored or returned, and proper error handling is implemented to prevent credential leakage. This operation is essential for the 'member' kind user role as it provides authentication. It complements the join and refresh endpoints.\n\nThe response uses ITodoListAppUser.IAuthorized to return tokens for secure communication.\n\nThis operation relies on the todo_list_app_users Prisma schema model supporting email, password_hash, email_verified, and deleted_at columns for secure and managed authentication state.","authorizationType":"login","description":"Authenticates an existing user by verifying email and password for the 'user' role in todoListApp. Validates credentials against stored password hash and email verification status. Issues JWT access and refresh tokens upon successful login. Relies on todo_list_app_users table with unique email and password_hash fields. Ensures user is not soft deleted and has verified email. Uses 'login' authorization type as a secure authentication entry point. Returns authorized user response ITodoListAppUser.IAuthorized.","summary":"User login for todo_list_app_users table","parameters":[],"requestBody":{"description":"Login credentials including email and password, defined in ITodoListAppUser.ILogin.","typeName":"ITodoListAppUser.ILogin"},"responseBody":{"description":"Authorized user data with JWT tokens after successful login.","typeName":"ITodoListAppUser.IAuthorized"},"authorizationRole":"user","name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"This API operation refreshes the access token for the 'user' role in todoListApp by accepting a valid refresh token and returning a new access token encapsulated in ITodoListAppUser.IAuthorized. It ensures continual access without requiring re-login. The endpoint is accessible with authorization type 'refresh' and is located at '/auth/user/refresh' with POST method.\n\n-- Detailed Description --\nRefresh token operation requires a valid refresh token issued at login or registration. It checks the token's validity and user existence in the todo_list_app_users table with non-null email, verified email state, and no deletion timestamp. Upon success, new JWT tokens are issued to maintain session continuity.\n\nSecurity is critical; refresh tokens must be securely stored and transmitted over HTTPS. This operation forms an essential part of the authentication lifecycle for 'member' kind users, working alongside 'join' and 'login' endpoints.\n\nResponse type ITodoListAppUser.IAuthorized encapsulates the updated authorized state with tokens.\n\nThe Prisma schema todo_list_app_users supports these flows via its fields email, email_verified, and deleted_at to manage account states accordingly.","authorizationType":"refresh","description":"Refreshes JWT access token for the 'user' role using a valid refresh token. Ensures continuous authenticated session without user re-login. Relies on the todo_list_app_users table to validate user existence, email verification status, and account state. Uses 'refresh' authorization type indicating token renewal. Returns authorized user response ITodoListAppUser.IAuthorized with new tokens.","summary":"Refresh JWT token for todo_list_app_users table","parameters":[],"requestBody":{"description":"Refresh token request data containing the refresh token, defined in ITodoListAppUser.IRefresh.","typeName":"ITodoListAppUser.IRefresh"},"responseBody":{"description":"Authorized user data with fresh JWT tokens after refresh.","typeName":"ITodoListAppUser.IAuthorized"},"authorizationRole":"user","name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"This operation retrieves detailed information for an individual user in the todo_list_app_users table from the Prisma schema. It supports fetching user account data by unique user ID. The table includes fields such as id (UUID primary key), email (unique email address), email_verified (boolean flag), timestamps for creation, update, and soft deletion (nullable). The operation enforces security by allowing only authorized roles to access sensitive user data. It returns the main user entity object with the password hash field omitted for security compliance.","description":"This operation fetches detailed information about a single user account identified by their unique UUID. It retrieves the user's email, email verification status, and timestamps related to when the account was created, last updated, and deleted (if soft deleted).\n\nSecurity considerations require that only authorized roles can access this endpoint since it exposes sensitive authentication data. The password hash field is excluded to prevent exposure of sensitive information.\n\nThe operation tightly couples with the todo_list_app_users table in the Prisma schema ensuring that the exact fields and data integrity rules are respected. It returns a complete user object matching the schema properties, excluding sensitive password data.\n\nTypical errors include attempting to fetch a user ID that does not exist, which should return a not-found error. Unauthorized access attempts should be rejected with a 403 or similar error.\n\nThis operation is distinct from list or update operations and serves as a granular user data retrieval endpoint, often supporting administrative or account management UI features.","summary":"Retrieve detailed information of a specific todo list app user account","parameters":[{"name":"id","description":"Unique identifier of the todo list app user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed user account information for the specified user ID without password hash","typeName":"ITodoListAppTodoListAppUsers.ISafe"},"authorizationRoles":["user"],"name":"at","path":"/todoListApp/user/todoListAppUsers/{id}","method":"get","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"post"},"description":"A todo item must be created for the user before retrieving detailed information of the user."}]},{"specification":"This operation retrieves a paginated list of todo list app user accounts matching optional search and filter criteria. It supports pagination, sorting, and filtering parameters encapsulated in the request body. The user table represents individual user accounts with fields such as id (UUID), email, email verified flag, created and updated timestamps, and nullable soft delete timestamp.\n\nThe operation supports advanced searching and sorting capabilities on user properties such as email, creation date, and verification status. Pagination controls allow clients to request specific pages and sizes.\n\nThe response returns a paginated container holding summary information of users optimized for list display.\n\nSecurity considerations require that only authorized roles can perform this search, which generally is limited to admin or similar roles managing user accounts.\n\nThis operation does not alter any data and provides a read-only list operation for user accounts.","description":"This operation enables clients to perform complex search and retrieval operations over todo list app users. The request body supports specifying search filters like email substring matching, filtering by email verification status, and sorting preferences including sort column and order.\n\nThe response is a paginated list of user summary objects optimized for UI rendering in admin or management dashboards.\n\nProper validation of input parameters in the request body ensures effective filtering and prevents injection or invalid queries.\n\nSecurity constraints mean only authorized user roles can execute this operation, limiting exposure of sensitive user data.\n\nThis endpoint complements single-entity retrieval and update endpoints providing complete user account management capabilities.","summary":"Search and retrieve a filtered, paginated list of todo list app users","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for todo list user filtering","typeName":"ITodoListAppTodoListAppUsers.IRequest"},"responseBody":{"description":"Paginated list of todo list app user summary information matching search criteria","typeName":"IPageITodoListAppTodoListAppUsers.ISummary"},"authorizationRoles":["user"],"name":"index","path":"/todoListApp/user/todoListAppUsers","method":"patch","authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing user account in the todo_list_app_users table. It accepts a full update of the user properties provided in the request body, identified by the unique user ID in the path parameter.\n\nThe update respects validation rules on fields such as email uniqueness and password hash format. It allows modification of email, password_hash, email_verified status, and timestamps excluding soft deletion timestamp which is managed internally.\n\nThe operation enforces ownership and authorization ensuring only permitted roles may update user accounts. The updated record is returned in the response reflecting new values.\n\nErrors include conflict on unique email constraint or attempts to update non-existent users.\n\nThis operation integrates with the existing user management flow allowing account data alterations.","description":"Update detailed information of an existing todo list app user account. The request body must contain the updated email, password hash, email verification status, and timestamps as needed. The user account is identified by the id path parameter. Ownership and permission checks ensure only authorized modification.\n\nThis operation modifies core user identity fields and is critical for account management and security enforcement.\n\nProper validation and transactional integrity are essential to maintain data consistency and application security.","summary":"Update details of a specific todo list app user account","parameters":[{"name":"id","description":"Unique identifier of the todo list app user to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated user account information for the specified user ID","typeName":"ITodoListAppTodoListAppUsers.IUpdate"},"responseBody":{"description":"The updated user account record reflecting all changes","typeName":"ITodoListAppTodoListAppUsers"},"authorizationRoles":["user"],"name":"update","path":"/todoListApp/user/todoListAppUsers/{id}","method":"put","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"post"},"description":"A todo item must be created for the user before updating the user."}]},{"specification":"This operation permanently deletes the todoListAppUsers record identified by the user's unique UUID id. It directly manipulates the todo_list_app_users table as defined in the Prisma schema, specifically the user account entity that stores authentication data such as email, password hash, email verification, and timestamps. This deletion operation removes the user account record and cascades the deletion of associated todo items due to the onDelete: Cascade relation defined in the schema. It requires the unique user id as a path parameter. No request body is required, and there is no response body. Authorization roles should include \"user\" to restrict deletion to authenticated users, presumably the owner of the account.","description":"Permanently removes the user account record specified by the {id} in the path from the database, including cascade deletion of owned todo items as per Prisma schema rules. This operation MUST verify that the requesting user is authorized to delete their own account to prevent unauthorized user removal. It operates directly on the todo_list_app_users table, which stores user authentication credentials and related metadata.\n\nSecurity considerations require strong authentication and authorization checks, as deleting a user account cannot be undone and will remove all associated task data. This endpoint is critical and must ensure only the authenticated owner can perform this deletion.\n\nExpected behavior includes validation of the {id} as a UUID, verification of user ownership, and a hard (permanent) delete operation with no recovery.\n\nNo request body is sent, and no response body is returned on successful deletion. Error handling includes responding with authorization errors for unauthorized attempts, not found errors if the user does not exist, and appropriate server error messages for unexpected failures.","summary":"Delete a todoListApp user account by id","parameters":[{"name":"id","in":"path","description":"Unique identifier of the user account to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"erase","path":"/todoListApp/user/todoListAppUsers/{id}","method":"delete","prerequisites":[{"endpoint":{"path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"post"},"description":"The todo list app user must be created before the user account can be deleted."}]},{"specification":"This operation retrieves a paginated list of todo list tasks owned by a specific user, enabling filtering, sorting, and searching capabilities. It operates directly on the todo_list_app_todo_items table related to the todo_list_app_users table via the todo_list_app_user_id foreign key. Parameters include the user ID to scope the tasks to that user.\n\nThe request body expects an object containing search criteria, pagination options, and sorting preferences for todo items. The response returns a paginated, searchable list of todo items including identifiers, descriptions, statuses, and timestamps. This supports the user's need to view and manage their tasks effectively.\n\nAuthorization requires the user role, ensuring only authenticated users can access their tasks. The operation name is \"index\" following REST conventions for listing resources.","description":"Retrieve a filtered and paginated list of todo items owned by the user identified by {todoListAppUserId}. This supports searching, sorting, and paging to optimize task management.\n\nThis operation enforces ownership, meaning users can only retrieve their own tasks. It interacts with the todo_list_app_todo_items table, which stores task descriptions, statuses (only \"pending\" or \"done\"), and timestamps.\n\nSecurity measures ensure the requesting user is authenticated and authorized to view only their own tasks. Validation of the {todoListAppUserId} as a UUID is performed. The response includes task summary details with pagination data.\n\nTypical usage includes client applications requesting the current user's task list with filter criteria, page size, and sort order.\n\nErrors include authorization failures if attempting to access other users' tasks and proper handling of invalid request parameters or server errors.","summary":"Retrieve a filtered and paginated list of todo items for a user","parameters":[{"name":"todoListAppUserId","in":"path","description":"Identifier of the user owning the todo items","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for todo items filtering","typeName":"ITodoListAppTodoItem.IRequest"},"responseBody":{"description":"Paginated list of todo item summary information matching search criteria","typeName":"IPageITodoListAppTodoItem.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index","path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"patch","prerequisites":[{"endpoint":{"path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"post"},"description":"The todo list app user must be created before retrieving todo items."}]},{"specification":"This operation retrieves detailed information about a specific todo item identified by its UUID and scoped to the owning user's UUID. It operates on the todo_list_app_todo_items table joined with the todo_list_app_users table for ownership verification.\n\nThe path parameters include the user's ID and the todo item's unique ID. The response returns comprehensive entity data including description, status (\"pending\" or \"done\"), and timestamps.\n\nSecurity and authorization focus on restricting access to the owning user only. The operation validates that the requesting user owns the todo item. Errors include not-found if the todo item doesn't exist or doesn't belong to the user. This operation uses HTTP GET to fetch detailed entity data.","description":"Retrieve detailed information about a specific todo item owned by the user identified by {todoListAppUserId} and the todo item identified by {id}.\n\nOnly the owning user is authorized to access this data. The todo item includes fields for description, status (\"pending\" or \"done\"), creation, and update timestamps.\n\nThis operation requires validation of both path parameters as UUIDs and enforces strict ownership checking.\n\nCommon errors are authorization failure if the item belongs to another user, and not found if the item does not exist.\n\nThe response provides full task details for client applications requiring display or editing functionality.","summary":"Get details of a specific todo item owned by a user","parameters":[{"name":"todoListAppUserId","in":"path","description":"Unique identifier of the user owning the todo item","schema":{"type":"string","format":"uuid"}},{"name":"id","in":"path","description":"Unique identifier of the todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified todo item","typeName":"ITodoListAppTodoItem"},"authorizationType":null,"authorizationRole":"user","name":"at","path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems/{id}","method":"get","prerequisites":[{"endpoint":{"path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"post"},"description":"The todo item must be created before retrieving detailed information about it."}]},{"specification":"This operation creates a new todo item for a specific user in the todoListAppTodoItems table. It requires the user ID as a path parameter and a request body containing the item's description and status. The operation validates the description length (max 256 characters, non-empty) and sets the initial status, which must be 'pending' or 'done'. It returns the created todo item entity with all its detailed properties including timestamps. This operation requires the user role 'user' as only authenticated users may create their own todo items.","description":"Creates a new todo item owned by the specified user. The description must be non-empty and at most 256 characters. Status must be either 'pending' or 'done', typically 'pending' at creation. The item is uniquely identified and timestamps for creation and last update are recorded.\n\nOnly the authenticated user owning the specified user ID may perform this operation. The system enforces ownership and validates input values.\n\nThe operation relates to the todo_list_app_todo_items table in the Prisma schema. It references todo_list_app_users via the foreign key todo_list_app_user_id. The response entity contains all standard todo item fields.\n\nErrors may occur if the description is invalid, if the status is not recognized, or if authorization fails.\n\nClient must supply the user ID in the path and a valid request body matching the ITodoListAppTodoItem.ICreate schema.\n\nRelated operations include retrieving the todo items list, updating existing items, and deleting items.","summary":"Create a new todo item for a user","parameters":[{"name":"todoListAppUserId","description":"Unique identifier of the owning todo list app user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation info of the todo item","typeName":"ITodoListAppTodoItem.ICreate"},"responseBody":{"description":"Newly created todo item entity","typeName":"ITodoListAppTodoItem"},"authorizationType":null,"authorizationRole":"user","path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems","method":"post","name":"create","prerequisites":[]},{"specification":"This operation updates an existing todo item by its ID and user ID in the todo_list_app_todo_items table. It requires path parameters for both user ID and item ID, and a request body with updated description and/or status. The status value must be either 'pending' or 'done'. The operation enforces that only the authenticated user owning the todo item can perform the update. Upon success, it returns the updated todo item entity including all fields and timestamps.\n\nThe endpoint supports updating the description only if the item's status is 'pending', otherwise description update may be rejected by business logic. Status changes can mark the item as done. The operation supports full replacement or partial updates based on input.\n\nErrors may occur if ownership is invalid, item does not exist, or validation fails on description or status.\n\nClient must supply user ID and item ID as path parameters and data matching ITodoListAppTodoItem.IUpdate in the request body.\n\nRelated operations include creating new todo items, deleting todo items, and fetching todo items list.","description":"Updates an existing todo item owned by the specified user. Description changes are allowed only if the item is currently 'pending'. Status can be updated to 'done' or 'pending'.\n\nThe operation verifies user ownership and validates the description length and status value.\n\nThis operation manipulates the todo_list_app_todo_items DB table and relates to todo_list_app_users for ownership.\n\nRequest must include user ID and todo item ID in path and request body with updated fields matching ITodoListAppTodoItem.IUpdate.\n\nErrors returned include authorization failure, validation errors, or item not found errors.\n\nThis complements the create and delete operations for managing todo items.","summary":"Update an existing todo item","parameters":[{"name":"todoListAppUserId","description":"Unique identifier of the owning todo list app user","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the todo item","typeName":"ITodoListAppTodoItem.IUpdate"},"responseBody":{"description":"Updated todo item entity","typeName":"ITodoListAppTodoItem"},"authorizationType":null,"authorizationRole":"user","path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems/{id}","method":"put","name":"update","prerequisites":[]},{"specification":"This operation deletes an existing todo item permanently by its ID and user ID from the todo_list_app_todo_items table. It requires path parameters for user ID and todo item ID. The operation enforces that only the authenticated user owning the todo item can perform the deletion. Upon success, no content is returned.\n\nThis is a hard delete operation since the todo_list_app_todo_items table does not store a soft delete timestamp. Deleting a todo item removes it permanently from the database.\n\nErrors include authorization failure, item not found, or internal errors.\n\nClient must supply user ID and todo item ID values in the path parameters.\n\nThis operation complements the creation and update operations for full lifecycle management of todo items.","description":"Deletes a todo item owned by the specified user. This operation permanently removes the record from the database.\n\nIt verifies ownership and returns no response content.\n\nThe todo_list_app_todo_items schema does not support soft delete, so this is a hard delete.\n\nErrors include authorization failure or item not found.\n\nClient must provide user ID and todo item ID in the path.\n\nRelated operations include creating, updating, and retrieving todo items.","summary":"Delete a todo item permanently","parameters":[{"name":"todoListAppUserId","description":"Unique identifier of the owning todo list app user","schema":{"type":"string","format":"uuid"}},{"name":"id","description":"Unique identifier of the todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","path":"/todoListApp/user/todoListAppUsers/{todoListAppUserId}/todoListAppTodoItems/{id}","method":"delete","name":"erase","prerequisites":[]}],"components":{"authorization":[{"name":"user","description":"Authenticated users who can create, read, update, and delete their own todo items. They have personal access to their tasks and can manage them fully.","kind":"member"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListAppTodoListAppUsers.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListAppTodoListAppUsers.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListAppTodoItem.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListAppTodoItem.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListAppUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's unique email address to be used for login and identity verification."},"password_hash":{"type":"string","description":"Hashed password for user authentication, never store plain text passwords."},"email_verified":{"type":"boolean","description":"Flag indicating whether the user's email address has been verified."}},"required":["email","password_hash","email_verified"],"description":"User account creation data required for registering a new user in the todo_list_app_users table.\n\nThis schema contains the essential fields needed to create a user: email address, hashed password, and email verification status.\n\nThese fields ensure secure authentication and registration support."},"ITodoListAppUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authorized user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token and authenticated user ID.\n\nThis response is returned after successful authentication operations such as login and registration."},"ITodoListAppUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's registered email address used for login."},"password":{"type":"string","description":"Plain text password used for authentication verification."}},"required":["email","password"],"description":"User login credentials including email and plaintext password for verification during authentication."},"ITodoListAppUser.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"Refresh token provided during authentication, used to obtain new access tokens."}},"required":["refreshToken"],"description":"Refresh token request data containing the token used to renew JWT access tokens."},"ITodoListAppTodoListAppUsers.ISafe":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifying the user."},"email":{"type":"string","description":"User's unique email address for login and identity verification."},"email_verified":{"type":"boolean","description":"Indicates whether the user's email address has been verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the user account was soft deleted, if applicable."}},"required":["id","email","email_verified","created_at","updated_at"],"description":"A safe view of a todo list app user account excluding sensitive fields such as password hashes.\n\nThis entity represents a user account with essential public properties.\n\nDeleted_at is nullable and only included when the user is soft deleted."},"ITodoListAppTodoListAppUsers.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Page number of the paginated list."},"limit":{"oneOf":[{"type":"integer","format":"uint32"},{"type":"null"}],"description":"Limitation of records per a page."},"search":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Search term for filtering users by email or other indexed properties."},"email_verified":{"oneOf":[{"type":"boolean"},{"type":"null"}],"description":"Filter by whether the user's email is verified."},"sort_by":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Column name to sort the results by."},"order":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Sort order: ascending or descending."}},"required":[],"description":"Request parameters for searching and paginated retrieval of todo list app user accounts.\n\nSupports filtering, sorting, and paging options to refine the list search results.\n\nParameters such as page, limit, search text, email verification status, and sorting can be used."},"ITodoListAppTodoListAppUsers.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"User's unique email address for login and identity verification."},"password_hash":{"type":"string","description":"Hashed password for user authentication."},"email_verified":{"type":"boolean","description":"Indicates whether the user's email address has been verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the user account was soft deleted, if applicable."}},"required":[],"description":"Details for updating a todo list app user account.\n\nProperties are optional and can be updated selectively.\n\nIncludes email, password hash, email verification status, and timestamps.\n\nNote that ownership and immutable fields such as the user ID are not included and cannot be updated here."},"ITodoListAppTodoListAppUsers":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key identifying the user."},"email":{"type":"string","description":"User's unique email address for login and identity verification."},"password_hash":{"type":"string","description":"Hashed password for user authentication."},"email_verified":{"type":"boolean","description":"Indicates whether the user's email address has been verified."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp indicating when the user account was soft deleted, if applicable."}},"required":["id","email","password_hash","email_verified","created_at","updated_at"],"description":"Represents the complete todo list app user account entity.\n\nIncludes identification, authentication credentials (password hash), verification status, and timestamps.\n\nDeleted_at is nullable and indicates soft deletion status."},"ITodoListAppTodoItem.IRequest":{"type":"object","properties":{"page":{"description":"Page number of the paginated results.\n\nPagination control that specifies which page of the full result set to retrieve.\n\nThis property is optional; if omitted, the default is the first page.","type":"integer","format":"int32"},"limit":{"description":"Maximum number of records to retrieve per page.\n\nUsed to limit the number of todo items returned in a single response.\n\nIf omitted, the default limit applies.","type":"integer","format":"int32"},"search":{"description":"A text keyword to filter todo items by description or other text fields.\n\nSupports case-insensitive substring matching targeting todo item descriptions.\n\nUsed to find tasks that contain the given text in descriptions.","type":"string"}},"required":[],"description":"Request DTO for filtering and paginating todo items.\n\nAllows clients to specify pagination parameters and search string to control which todo items are returned in lists.\n\nThis type is used for list and search operations of todo items."},"ITodoListAppTodoItem":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo item.\n\nPrimary key in the todo_list_app_todo_items table.\n\nRepresents a specific task owned by a user."},"todo_list_app_user_id":{"type":"string","format":"uuid","description":"Unique identifier of the user who owns this todo item.\n\nForeign key to todo_list_app_users table 'id' column.\n\nEstablishes ownership relationship between task and user."},"description":{"type":"string","description":"Task description text.\n\nDetailed text describing the todo item task.\n\nMaximum length limited by application logic to 256 characters.\n\nNon-empty string."},"status":{"oneOf":[{"const":"pending","description":"Task completion status.\n\nAllowed values are:\n- 'pending': task is not yet completed.\n- 'done': task has been completed."},{"const":"done","description":"Task completion status.\n\nAllowed values are:\n- 'pending': task is not yet completed.\n- 'done': task has been completed."}],"description":"Task completion status.\n\nAllowed values are:\n- 'pending': task is not yet completed.\n- 'done': task has been completed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was created.\n\nAutomatically set and stored in ISO 8601 with timezone.\n\nUsed for sorting and audit purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was last updated.\n\nReflects the last modification time of the todo item.\n\nAutomatically maintained by the system."}},"required":["id","todo_list_app_user_id","description","status","created_at","updated_at"],"description":"Main entity schema for todo list tasks.\n\nRepresents a single task owned by a user with identifiers, descriptive text, status flags, and audit timestamps."},"ITodoListAppTodoItem.ICreate":{"type":"object","properties":{"description":{"type":"string","description":"Task description text.\n\nUser provided text describing the todo item.\n\nMust be a non-empty string up to 256 characters."},"status":{"oneOf":[{"const":"pending","description":"Task completion status.\n\nAllowed values:\n- 'pending' when task is newly created.\n- 'done' if task is created in a completed state (rare)."},{"const":"done","description":"Task completion status.\n\nAllowed values:\n- 'pending' when task is newly created.\n- 'done' if task is created in a completed state (rare)."}],"description":"Task completion status.\n\nAllowed values:\n- 'pending' when task is newly created.\n- 'done' if task is created in a completed state (rare)."},"todo_list_app_user_id":{"type":"string","format":"uuid","description":"Unique identifier of the user who will own this todo item.\n\nMandatory foreign key to the todo_list_app_users table.\n\nThis field must be set by the system from authenticated user context in secure implementations."}},"required":["description","status","todo_list_app_user_id"],"description":"Request DTO for creating a new todo item.\n\nIncludes task description, completion status (usually 'pending'), and user ownership identifier.\n\nAuthorization ensures that todo_list_app_user_id matches the authenticated user."},"ITodoListAppTodoItem.IUpdate":{"type":"object","properties":{"description":{"type":"string","description":"Updated description of the todo item.\n\nMay be provided only if the todo item status is 'pending'.\n\nMaximum length 256 characters."},"status":{"oneOf":[{"const":"pending","description":"Updated task completion status.\n\nAllowed values are 'pending' or 'done'.\n\nAllows marking a task as complete or reopening it."},{"const":"done","description":"Updated task completion status.\n\nAllowed values are 'pending' or 'done'.\n\nAllows marking a task as complete or reopening it."}],"description":"Updated task completion status.\n\nAllowed values are 'pending' or 'done'.\n\nAllows marking a task as complete or reopening it."}},"required":[],"description":"Request DTO for updating todo items.\n\nIncludes optional fields for modifying the description and/or status.\n\nRestrictions apply to updates depending on the current status of the todo item."},"ITodoListAppTodoListAppUsers.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo list app user.\n\nThis is the primary key for identifying user accounts in the system."},"email":{"type":"string","description":"The unique email address of the user.\n\nThis email is used for login and communication and must be unique across all users."},"email_verified":{"type":"boolean","description":"Indicates whether the user's email address has been verified.\n\nA verified email means the user has confirmed ownership of the email address, enabling full access to the application features."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created.\n\nThis field records the exact time the account was initially registered and persisted."}},"required":["id","email","email_verified","created_at"],"description":"Summary information for todo list app user accounts.\n\nThis simplified schema includes essential identification and status fields used in list views or minimal user representations. It omits sensitive fields such as password hashes to ensure security and privacy.\n\nThe schema aligns with the todo_list_app_users table structure, reflecting user public information relevant to most application features."},"ITodoListAppTodoItem.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo item.\n\nThis is used to identify the todo task in the database and API endpoints."},"description":{"type":"string","description":"Text description of the todo item.\n\nShould be a non-empty string up to 256 characters describing the task to be performed."},"status":{"oneOf":[{"const":"pending","description":"Completion status of the todo item.\n\nAllowed values are 'pending' for incomplete tasks and 'done' for completed tasks."},{"const":"done","description":"Completion status of the todo item.\n\nAllowed values are 'pending' for incomplete tasks and 'done' for completed tasks."}],"description":"Completion status of the todo item.\n\nAllowed values are 'pending' for incomplete tasks and 'done' for completed tasks."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was created.\n\nRecords when the task was initially added to the todo list."}},"required":["id","description","status","created_at"],"description":"Summary data for todo items in the todo list application.\n\nThis schema includes only the most essential fields used for listing tasks, enabling efficient retrieval and display without sensitive or excessive details.\n\nIt corresponds to the todo_list_app_todo_items database schema with fields curated for secure and minimal data transfer."}}}}