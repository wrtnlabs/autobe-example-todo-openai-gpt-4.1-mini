{"operations":[{"specification":"This operation creates a temporary guest account for unauthenticated guest users who cannot log in with credentials but need minimal access and temporary tokens. It corresponds to the todo_list_guest table in the Prisma schema, which supports guest entities with minimal identification and audit timestamps, but no email or password. The API allows creation of a guest account with soft deletion support. The response provides authorized token information for temporary access. The path parameter roleName represents the guest role name in the system, typically 'guest'.","authorizationType":"join","description":"This API operation enables the creation of a new guest account in the todo_list_guest table. Guest users do not authenticate with email or password but can gain temporary authenticated access via this endpoint.\n\nThe operation manages creation timestamps (created_at, updated_at) automatically by the backend. The soft delete is represented by deleted_at but the operation focuses on account creation.\n\nGuest users have limited permissions and cannot perform login; hence, the login API is not provided for guests.\n\nThis operation is publicly accessible without prior authentication and issues temporary tokens upon account creation.\n\nRelated operations include token refresh via /auth/guest/refresh for issuing new access tokens after expiration.","summary":"Create a temporary guest account with JWT tokens for limited access.","parameters":[],"requestBody":null,"responseBody":{"description":"Provides authorization token info for the guest role.","typeName":"ITodoListGuest.IAuthorized"},"authorizationRole":null,"name":"joinGuest","path":"/auth/guest/join","method":"post"},{"specification":"This operation refreshes the access tokens for guest users using valid refresh tokens. It corresponds to the todo_list_guest table which supports audit and soft deletion but no email or password fields.\n\nGuests do not perform login and cannot use login endpoints. Token refresh allows extending their temporary session without rejoining.\n\nThe API requires a valid refresh token provided in the request body. The response body returns new authorized tokens for continued limited access.\n\nThis endpoint helps guests maintain temporary authenticated access securely with token refresh workflow.","authorizationType":"refresh","description":"This operation allows a guest user to refresh JWT tokens using a valid refresh token. It requires a previously issued refresh token to extend session duration.\n\nSince guests cannot log in, this endpoint is essential for maintaining temporary authenticated sessions.\n\nSoft delete field deleted_at indicates guest account status but does not block token refresh if the account is active.\n\nRelated operations: /auth/guest/join to create initial tokens, /auth/guest/login is not applicable.","summary":"Refresh JWT tokens for a guest user using a refresh token.","parameters":[],"requestBody":{"description":"Refresh token payload for guests","typeName":"ITodoListGuest.IRefresh"},"responseBody":{"description":"New JWT tokens for guest user","typeName":"ITodoListGuest.IAuthorized"},"authorizationRole":null,"name":"refreshGuest","path":"/auth/guest/refresh","method":"post"},{"specification":"This operation enables new user registration for the 'user' role in the todo list application.\nThe user entity corresponds to the 'todo_list_user' Prisma table which includes email and password_hash fields for authentication.\nThe operation is publicly accessible and allows account creation by submitting user-provided information.\nUpon successful registration, the system issues initial JWT tokens granting authorized access.\n\nGuests cannot use this operation as it is restricted to members. Validation of email uniqueness and password hash storage is assumed in implementation.\n\nThis API operation is the entry point for new user onboarding and is critical for access.\n\nIt is closely related to login and token refresh operations for complete authentication lifecycle.\n\nThe operation uses authorizationType 'join' which fits user registration flows.\n\nNo soft delete considerations are required here.\n\nSecurity considerations include handling user credentials securely and implementing proper validation to prevent duplicate emails.","authorizationType":"join","description":"This endpoint allows new users to register by providing their credentials.\nIt interacts with the todo_list_user table, specifically verifying unique email and securely storing hashed passwords.\nUpon successful registration, it returns authorized tokens allowing further authenticated interactions.\nThis operation is public and requires no prior authentication.\nSecurity measures ensure data privacy and integrity during user creation.\nThis operation pairs with login and token refresh for managing user sessions securely.","summary":"Registration operation for todo_list_user role to create new user accounts and issue initial tokens.","parameters":[],"requestBody":{"description":"User creation payload including email and password hash.","typeName":"ITodoListUser.ICreate"},"responseBody":{"description":"Authorized user response including JWT tokens.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"join","path":"/auth/user/join","method":"post"},{"specification":"This operation enables authenticated users of role 'user' to log in by providing valid credentials.\nIt corresponds to the 'todo_list_user' Prisma table which stores email and hashed password.\nThe system authenticates credentials and issues JWT access and refresh tokens.\n\nThis operation is publicly accessible as users must provide credentials to log in.\n\nSecurity features must prevent credential leaks and limit login attempts.\n\nThe operation uses authorizationType 'login' as it validates user credentials.\n\nIt integrates closely with join and refresh operations for a seamless authentication experience.\n\nNo soft delete specific actions are involved here, but underlying records may be soft deleted that are skipped during login validation.\n\nError handling includes rejecting invalid credentials and locked accounts.","authorizationType":"login","description":"Allows existing users to authenticate with email and password.\nReturns authorized tokens upon successful authentication.\nValidates credentials against stored password hash in todo_list_user table.\nAccessible publicly for unauthenticated users.\nPart of core authentication flow with join and refresh.\nSecurity precautions included to safeguard credentials and limit brute force attempts.","summary":"Login operation for todo_list_user role issuing access tokens after successful authentication.","parameters":[],"requestBody":{"description":"User login credentials with email and password.","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authorized user response including JWT tokens.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"login","path":"/auth/user/login","method":"post"},{"specification":"This operation refreshes JWT tokens for authenticated users of role 'user'.\nThe refresh token is validated and new access tokens are issued.\n\nThis helps maintain session continuity and security.\n\nThe associated Prisma table is 'todo_list_user' where user identity and token linkage is managed.\n\nThis operation requires a valid refresh token and is not publicly accessible.\n\nAuthorization type is 'refresh' consistent with token renewal functionality.\n\nIntegrates with join and login to provide complete JWT lifecycle management.\n\nNo soft delete behavior is impacted.\n\nToken invalidation and expiry policies are part of secure implementation.\n\nError handling includes rejecting expired or invalid refresh tokens.","authorizationType":"refresh","description":"Allows an authenticated user with a valid refresh token to obtain new access tokens.\nValidates refresh token against stored sessions tied to todo_list_user.\nNot accessible publicly; requires valid refresh token.\nSupports continuous authenticated access without re-login.\nSecurity measures enforce token expiry and revocation.\nPaired with join and login operations to complete authentication cycle.","summary":"Token refresh operation for todo_list_user role renewing access tokens.","parameters":[],"requestBody":{"description":"Refresh token payload.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Authorized user response with refreshed JWT tokens.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":"user","name":"refresh","path":"/auth/user/refresh","method":"post"},{"specification":"This API operation is designed for the Administrator role represented by the todo_list_admin table in the Prisma schema. It implements the core authentication registration functionality for administrators, allowing creation of a new admin account with email and password credentials. The authorizationType \"join\" marks this operation as a user registration endpoint that creates accounts. This endpoint is publicly accessible as no prior authentication is required to register. The response body returns an IAuthorized type with JWT tokens, following the naming convention for authentication responses for the TodoList admin role.\n\nThis aligns with the todo_list_admin table's email and password_hash fields, which are necessary for login and authentication. The creation timestamps are managed automatically. No soft-delete considerations affect this operation. This join operation is essential for accounts with kind \"admin\". It is part of the authentication workflow that includes login and refresh operations.\n\nThe endpoint works by accepting the admin's credentials in the request body and returning tokens upon account creation.\n\nRelated API operations: login (authenticate admin), refresh (renew tokens)","authorizationType":"join","description":"Create a new administrator account in the todo_list_admin table. Requires providing email and password to create account credentials. The todo_list_admin table enforces unique email to prevent duplicates. Upon success, the system generates initial JWT access and refresh tokens allowing secure access. Creation and update timestamps are recorded automatically. This operation supports administrators with full system privileges, consistent with the admin role's business purpose.","summary":"Create administrator account in todo_list_admin","parameters":[],"requestBody":{"description":"Admin registration info","typeName":"ITodoListAdmin.ICreate"},"responseBody":{"description":"Authorized admin account tokens","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":"admin","name":"joinAdmin","path":"/auth/admin/join","method":"post"},{"specification":"This API operation enables administrators to authenticate and acquire JWT access tokens for authorization to the backend system. It is based on the todo_list_admin table's email and password_hash fields, which validate admin credentials. The authorizationType \"login\" indicates this operation is for user login validation. The login endpoint is publicly accessible without prior authentication and returns JWT tokens upon successful login.\n\nThis operation forms a key part of the admin authentication workflow, allowing administrators to prove identity and gain access to protected resources. The todo_list_admin table's unique email constraint is crucial in validating login credentials correctly.\n\nRelated authentication operations include join (admin registration) and refresh (token renewal).\n\nStrict schema adherence ensures only expected data is submitted and returned in conjunction with the ITodoListAdmin types.","authorizationType":"login","description":"Authenticate administrator using email and password credentials stored securely in todo_list_admin. Returns JWT access and refresh tokens if credentials are valid. The system enforces unique email addresses and password hashes for authentication. This login is essential for admin users to securely access all system functions. The endpoint accepts email and password in the request body and returns authorized tokens for subsequent requests.","summary":"Authenticate administrator login","parameters":[],"requestBody":{"description":"Admin login credentials","typeName":"ITodoListAdmin.ILogin"},"responseBody":{"description":"Authorized admin account tokens","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":"admin","name":"loginAdmin","path":"/auth/admin/login","method":"post"},{"specification":"This API operation allows administrators to refresh their JWT access tokens using a valid refresh token. It references the todo_list_admin table for the admin role. The authorizationType \"refresh\" categorizes this as a token renewal operation distinct from join or login. Only requests with valid refresh tokens can invoke this endpoint to obtain new access tokens.\n\nThis operation maintains secure access by allowing token rotation and expiry management for admin users. It integrates tightly with the authentication system managing JWT lifecycles. The refresh token mechanism mitigates risks of stolen tokens and enforces session longevity according to business policies.\n\nIt returns an IAuthorized type containing updated tokens, consistent with the TodoList admin naming conventions.\n\nThis refresh endpoint complements join and login operations to fulfill the complete admin authentication lifecycle.","authorizationType":"refresh","description":"Refresh JWT access and refresh tokens for an authenticated administrator using a valid refresh token. Ensures continuous secure access without requiring re-login. This endpoint requires a valid refresh token in the request and responds with new JWT tokens for continued access to administrative capabilities.","summary":"Refresh administrator tokens","parameters":[],"requestBody":{"description":"Admin token refresh request","typeName":"ITodoListAdmin.IRefresh"},"responseBody":{"description":"Refreshed authorized tokens","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":"admin","name":"refreshAdmin","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of todo_list_guest entities. It supports filtering, sorting, and pagination according to the schema definitions of the todo_list_guest table. This API enables listing guest entities with metadata such as creation and update timestamps. It is designed for administrative or system maintenance purposes, given guests are unauthenticated users with limited permissions.","description":"Retrieve a filtered and paginated list of todo_list_guest entities. This operation allows clients to query guests created in the system, including their creation and update times.\n\nGuests represent unauthenticated users with minimal permissions. Only authorized system users should access this data.\n\nThe operation supports advanced pagination and filtering criteria, although guests are mostly static entities.\n\nSecurity considerations include ensuring this data is only accessible to authorized roles, given that guests are system actors rather than typical users.\n\nThis operation reads from the todo_list_guest table defined in the Prisma schema. The response returns guest entities' details like id, timestamps, and deletion status if applicable.","summary":"Search and retrieve a filtered, paginated list of todo_list_guest entities","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for todo_list_guest filtering","typeName":"ITodoListGuest.IRequest"},"responseBody":{"description":"Paginated list of todo_list_guest entities matching search criteria","typeName":"IPageITodoListGuest"},"authorizationType":null,"authorizationRole":"admin","path":"/todoList/admin/guests","method":"patch","name":"index"},{"specification":"This operation retrieves detailed information about a single todo_list_guest entity identified by its primary key. It returns all columns of the guest including id, created_at, updated_at, and deleted_at timestamps. The guest entity represents unauthenticated users with limited permissions.\n\nAccess is restricted to authorized roles only, given guest entities represent minimal system actors.\n\nThe API uses the guestId path parameter as the unique identifier for the retrieval operation. Validation ensures the guestId is a valid UUID.\n\nThe response includes the full todo_list_guest entity as defined in the Prisma schema, intended for detailed inspection or administrative purposes.","description":"Retrieve detailed information about a todo_list_guest entity by its unique identifier.\n\nThe todo_list_guest entity represents unauthenticated users with minimal permissions.\n\nOnly authorized personnel should access guest details.\n\nThe operation requires the guestId parameter, validated as a UUID, to identify the target guest.\n\nThis endpoint facilitates administrative review or system management tasks involving guests.","summary":"Retrieve detailed information of a specific todo_list_guest","parameters":[{"name":"guestId","description":"Unique identifier of the target guest","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed todo_list_guest entity information","typeName":"ITodoListGuest"},"authorizationType":null,"authorizationRole":"admin","path":"/todoList/admin/guests/{guestId}","method":"get","name":"at"},{"specification":"This operation updates an existing todo_list_guest entity identified by its unique ID. The update request may include modified values for the guest's properties such as timestamps. Given guests represent unauthenticated users with limited access, only authorized administrative roles may perform this update.\n\nThe update respects the schema fields for guests, including id, created_at, updated_at, and potentially the deleted_at timestamp for soft deletion.\n\nValidation ensures the guestId in the path is a valid UUID. The request body adheres to the update DTO schema for todo_list_guest.\n\nThe response returns the updated entity, reflecting the latest persisted state in the database.","description":"Update an existing todo_list_guest entity with new values.\n\nGuests represent unauthenticated users with limited permissions. Updates are restricted to authorized admin roles.\n\nThe operation requires the guestId path parameter for identification and a request body specifying updated fields.\n\nThe updated entity is returned in the response upon success.\n\nThis operation maps to the todo_list_guest table in the Prisma schema.","summary":"Update an existing todo_list_guest entity","parameters":[{"name":"guestId","description":"Unique identifier of the target guest","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated values for the todo_list_guest entity","typeName":"ITodoListGuest.IUpdate"},"responseBody":{"description":"The updated todo_list_guest entity information","typeName":"ITodoListGuest"},"authorizationType":null,"authorizationRole":"admin","path":"/todoList/admin/guests/{guestId}","method":"put","name":"update"},{"specification":"This operation permanently deletes a todo_list_guest entity identified by guestId. Since the table has a deleted_at field for soft deletion, this endpoint performs a hard delete physically removing the record from the database.\n\nOnly users with administrative authorization may execute this operation.\n\nThe deletion is final and the entity cannot be recovered after this operation completes.\n\nThis corresponds directly to the todo_list_guest Prisma schema, where records are removed by primary key the guestId.","description":"Delete a todo_list_guest entity by its unique identifier.\n\nThis is a hard delete removing the entity completely from the database.\n\nOnly admin users are authorized to perform this action.\n\nThe operation requires the guestId path parameter as identification.\n\nUpon successful deletion, the entity is no longer retrievable in the system.","summary":"Delete a todo_list_guest entity permanently","parameters":[{"name":"guestId","description":"Unique identifier of the target guest","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","path":"/todoList/admin/guests/{guestId}","method":"delete","name":"erase"},{"specification":"This operation retrieves a paginated and searchable list of todo_list_user entities from the database, enabling filtering and sorting of users. It operates on the todo_list_user table in the Prisma schema, which stores authenticated user entities with their email and password hash. The operation supports complex request bodies to allow clients to specify criteria such as pagination, filtering by email or creation date, and sorting order. This endpoint is a PATCH method to handle potentially complex queries. The response body is a paginated list of user summaries, allowing clients to efficiently display user lists. Security rules apply to authenticated users with 'admin' role who are authorized to view user data.","description":"This operation allows retrieval of a filtered and paginated list of authenticated users.\n\nThe todo_list_user table contains user data including id, unique email, password hash, and timestamps for creation, update, and deletion.\n\nAccess is restricted to authenticated admin users due to the sensitivity of user information.\n\nClients can specify filtering criteria, sorting preferences, and pagination controls in the request body.\n\nThe operation returns user summaries containing essential user attributes sufficient for listing purposes.\n\nProper error handling ensures that unauthorized or malformed requests are rejected with appropriate HTTP status codes.\n\nThis endpoint supports administrative user management dashboards and tools.","summary":"Retrieve a paginated list of users","parameters":[],"requestBody":{"description":"Request parameters for filtering, sorting, and pagination of users","typeName":"ITodoListUser.IRequest"},"responseBody":{"description":"Paginated response with summary information of users","typeName":"IPageITodoListUser.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/todoList/admin/users","method":"patch"},{"specification":"This operation retrieves detailed information of the specified todo_list_user entity identified by userId path parameter. The userId parameter corresponds to the unique identifier of the user. The operation returns the full user entity including id, email, password hash, and timestamps. This GET operation is intended for authorized users with the 'admin' role who need to view user details for management purposes. The endpoint validates the existence of the specified user and handles errors if the user does not exist or if access is denied.","description":"Retrieves detailed information of a specific authenticated user identified by their userId.\n\nThe todo_list_user schema includes id, unique email, hashed password, and timestamps for creation, update, and deletion.\n\nAccess is restricted to 'admin' role to maintain security and privacy.\n\nThe endpoint enforces validation of userId and returns appropriate errors when the user does not exist or access is forbidden.\n\nClients use this operation to view user details for administrative purposes.\n\nNo request body is required, and response includes all user fields except sensitive data not present in the schema.","summary":"Get detailed information of a specific user","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user information","typeName":"ITodoListUser"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/todoList/admin/users/{userId}","method":"get"},{"specification":"This operation updates an existing todo_list_user identified by the path parameter userId. It allows modification of user attributes such as email and password hash. This operation requires the full update body via a PUT request and returns the updated user entity. Only users with the 'admin' role are authorized to perform this operation to ensure secure management of user authentication data. The implementation must validate the uniqueness of the updated email and handle error conditions if the specified user does not exist.","description":"Updates attributes of an existing user, identified by userId.\n\nThe todo_list_user model includes email and password hash among other fields.\n\nThis operation is restricted to admins due to security implications.\n\nIt validates input data and enforces unique email constraints.\n\nThe endpoint returns the updated user entity upon successful update.\n\nClients use this to modify user details or reset passwords securely.\n\nErrors include validation failures, unauthorized access, and non-existent users.\n\nRequest body must contain valid update information.","summary":"Update an existing user","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for a user","typeName":"ITodoListUser.IUpdate"},"responseBody":{"description":"Updated user entity","typeName":"ITodoListUser"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/todoList/admin/users/{userId}","method":"put"},{"specification":"This operation permanently removes the todo_list_user entity specified by the userId path parameter. It performs a hard delete since the schema supports soft deletes indicated by a nullable deleted_at column. This means the operation should set the deleted_at timestamp instead of physically removing the record, thereby marking the user as deleted while preserving historical data. The operation is restricted to users with the 'admin' role for security reasons. Attempts to delete a non-existent user will be handled with appropriate errors.","description":"Deletes a user by setting the deleted_at timestamp to mark as deleted.\n\nThe todo_list_user table supports soft deletion, so this operation performs a soft delete.\n\nOnly users with the 'admin' role may execute this operation.\n\nThis ensures users are not physically removed but marked deleted for auditing.\n\nAttempts to delete non-existent users will respond with errors.\n\nClients can use this to deactivate user accounts when needed, preserving data integrity.","summary":"Soft delete a user","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/todoList/admin/users/{userId}","method":"delete"},{"specification":"This operation retrieves a paginated list of todo items owned by the authenticated user from the todo_list_todos table in the Prisma schema. It supports filtering by status and sorting by creation timestamp with newest first ordering. The user can only view their own todos. The request body accepts search criteria including pagination, status filters, and sorting options. The response body includes paginated summary information of the todos matching the search criteria.","path":"/todoList/user/todos","method":"patch","summary":"Retrieve a filtered and paginated list of todo items owned by the user","description":"This endpoint allows an authenticated user to search and retrieve their todo items with optional status filtering and pagination.\n\nAccess is restricted to authenticated users only; guests and unauthorized users are denied access.\n\nIt operates on the todo_list_todos table defined in the Prisma schema, which stores todo items including title, optional description, status, timestamps, and ownership linkage to users.\n\nThe operation enforces business rules such as returning only todos owned by the authenticated user and applying filters and sorting based on request parameters.\n\nThe response contains a paginated list of todo item summaries optimized for display purposes. Errors include authorization failures or invalid search criteria.\n\nRelated operations include retrieval of single todo details, creation, update, and deletion of todos.\n\nExpected behavior includes correct handling of pagination parameters and filters with efficient indexing as defined in the schema.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for todo filtering","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of todo summary information matching search criteria","typeName":"IPageITodoListTodo.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"index"},{"specification":"This operation fetches the details of a single todo item specified by the todoId path parameter, from the todo_list_todos table in the Prisma schema. It is restricted to the authenticated user owning the todo or an admin user. The todo item includes detailed fields such as title, description, status, creation and update timestamps. If the requested todo does not exist or is not accessible by the user, the operation returns a 404 Not Found error.","path":"/todoList/user/todos/{todoId}","method":"get","summary":"Retrieve details of a specific todo item by ID","description":"This endpoint allows an authenticated user or administrator to retrieve detailed information of a single todo item by its unique identifier.\n\nAccess control ensures only the owner user or an admin can access the todo details.\n\nThe operation queries the todo_list_todos table which stores todo items linked via todo_list_user_id to the owning user. It returns all relevant fields including title, description, status, creation and modification timestamps.\n\nIf the todo item does not exist or the user lacks permission, a 404 or authorization error is returned.\n\nThis allows clients to display and manage the details of a specific todo item.\n\nRelated operations include listing todos, updating, and deleting them.","parameters":[{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested todo item","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"user","name":"at"},{"specification":"This operation fetches the details of a single todo item specified by the todoId path parameter, from the todo_list_todos table in the Prisma schema. It is restricted to the authenticated user owning the todo or an admin user. The todo item includes detailed fields such as title, description, status, creation and update timestamps. If the requested todo does not exist or is not accessible by the user, the operation returns a 404 Not Found error.","path":"/todoList/admin/todos/{todoId}","method":"get","summary":"Retrieve details of a specific todo item by ID","description":"This endpoint allows an authenticated user or administrator to retrieve detailed information of a single todo item by its unique identifier.\n\nAccess control ensures only the owner user or an admin can access the todo details.\n\nThe operation queries the todo_list_todos table which stores todo items linked via todo_list_user_id to the owning user. It returns all relevant fields including title, description, status, creation and modification timestamps.\n\nIf the todo item does not exist or the user lacks permission, a 404 or authorization error is returned.\n\nThis allows clients to display and manage the details of a specific todo item.\n\nRelated operations include listing todos, updating, and deleting them.","parameters":[{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested todo item","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation updates an existing todo item identified by the todoId path parameter in the todo_list_todos table in the Prisma schema. It enforces that only the owner user or admin can perform the update. The request body allows updating the title, description, and status with validation rules ensuring title uniqueness per user, max length constraints, and allowed status values ('pending', 'in-progress', 'completed'). If the todo is not found or the user is unauthorized, the operation returns appropriate errors.","path":"/todoList/user/todos/{todoId}","method":"put","summary":"Update an existing todo item by ID","description":"This endpoint allows an authenticated user or administrator to update an existing todo item by its unique ID.\n\nOnly the owner of the todo or an admin can perform the update operation.\n\nThe request body accepts updates to the title, description, and status fields with validation rules:\n- Title must be unique per user and have a maximum length of 100 characters.\n- Description is optional and limited to 500 characters.\n- Status must be one of the allowed enum values: 'pending', 'in-progress', or 'completed'.\n\nIf any validation fails, an error is returned specifying the reason.\n\nIf the user is unauthorized or the todo item does not exist, appropriate authorization or not found errors are returned.\n\nSuccessful updates return the updated todo item details.","parameters":[{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the todo item","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"Updated todo item information","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"user","name":"update"},{"specification":"This operation updates an existing todo item identified by the todoId path parameter in the todo_list_todos table in the Prisma schema. It enforces that only the owner user or admin can perform the update. The request body allows updating the title, description, and status with validation rules ensuring title uniqueness per user, max length constraints, and allowed status values ('pending', 'in-progress', 'completed'). If the todo is not found or the user is unauthorized, the operation returns appropriate errors.","path":"/todoList/admin/todos/{todoId}","method":"put","summary":"Update an existing todo item by ID","description":"This endpoint allows an authenticated user or administrator to update an existing todo item by its unique ID.\n\nOnly the owner of the todo or an admin can perform the update operation.\n\nThe request body accepts updates to the title, description, and status fields with validation rules:\n- Title must be unique per user and have a maximum length of 100 characters.\n- Description is optional and limited to 500 characters.\n- Status must be one of the allowed enum values: 'pending', 'in-progress', or 'completed'.\n\nIf any validation fails, an error is returned specifying the reason.\n\nIf the user is unauthorized or the todo item does not exist, appropriate authorization or not found errors are returned.\n\nSuccessful updates return the updated todo item details.","parameters":[{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the todo item","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"Updated todo item information","typeName":"ITodoListTodo"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a todo item specified by the todoId path parameter from the todo_list_todos table in the Prisma schema. It enforces that only the owner user or an admin can delete the todo. The deletion is a hard delete as there is no soft delete flag conflicting with the requirements. Upon successful deletion, the todo item is permanently removed and cannot be retrieved. Unauthorized users or attempts to delete non-existing todos return errors.","path":"/todoList/user/todos/{todoId}","method":"delete","summary":"Delete a todo item by ID","description":"This endpoint allows an authenticated user or administrator to delete a todo item by its unique ID.\n\nOnly the owner user or an admin is authorized to perform the deletion.\n\nThe operation performs a hard delete on the todo_list_todos table, permanently removing the record.\n\nIf the todo item does not exist or the user is unauthorized, appropriate errors are returned.\n\nDeleted todo items are no longer retrievable by any user.\n\nThis operation complements the create, read, and update endpoints for full lifecycle management.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"erase"},{"specification":"This operation deletes a todo item specified by the todoId path parameter from the todo_list_todos table in the Prisma schema. It enforces that only the owner user or an admin can delete the todo. The deletion is a hard delete as there is no soft delete flag conflicting with the requirements. Upon successful deletion, the todo item is permanently removed and cannot be retrieved. Unauthorized users or attempts to delete non-existing todos return errors.","path":"/todoList/admin/todos/{todoId}","method":"delete","summary":"Delete a todo item by ID","description":"This endpoint allows an authenticated user or administrator to delete a todo item by its unique ID.\n\nOnly the owner user or an admin is authorized to perform the deletion.\n\nThe operation performs a hard delete on the todo_list_todos table, permanently removing the record.\n\nIf the todo item does not exist or the user is unauthorized, appropriate errors are returned.\n\nDeleted todo items are no longer retrievable by any user.\n\nThis operation complements the create, read, and update endpoints for full lifecycle management.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of todo items belonging to a specific user, supporting filtering, sorting, and pagination. It operates on the todo_list_todos table in the Prisma schema, which stores each todo item's title, description, status (pending, in-progress, completed), and creation metadata. The query parameters allow filtering by status, ordering by creation time, and paginating results. Only todos owned by the specified user are returned.","path":"/todoList/user/users/{userId}/todos","method":"patch","summary":"List and search todo items for a specific user","description":"Retrieve a filtered, sorted, and paginated list of todo items for a specified user.\n\nThis operation accepts search parameters to filter todo items by status (pending, in-progress, completed) and supports pagination and sorting by creation timestamp or other relevant fields.\n\nAuthorization is required; only the authenticated user or an admin can retrieve this user's todos. The returned todo items include title, description, status, and timestamps, reflecting data from the todo_list_todos table.\n\nThis endpoint corresponds to the todo_list_todos table in the Prisma schema, linked to todo_list_user via the user ID foreign key. It enforces that only todos for the given userId are returned.\n\nErrors occur if the user does not exist or if unauthorized access is attempted.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters to filter todos by status","typeName":"ITodoListTodos.IRequest"},"responseBody":{"description":"Paginated list of todo items for the user","typeName":"IPageITodoListTodos"},"authorizationType":null,"authorizationRole":"user","name":"index"},{"specification":"This operation retrieves a paginated list of todo items belonging to a specific user, supporting filtering, sorting, and pagination. It operates on the todo_list_todos table in the Prisma schema, which stores each todo item's title, description, status (pending, in-progress, completed), and creation metadata. The query parameters allow filtering by status, ordering by creation time, and paginating results. Only todos owned by the specified user are returned.","path":"/todoList/admin/users/{userId}/todos","method":"patch","summary":"List and search todo items for a specific user","description":"Retrieve a filtered, sorted, and paginated list of todo items for a specified user.\n\nThis operation accepts search parameters to filter todo items by status (pending, in-progress, completed) and supports pagination and sorting by creation timestamp or other relevant fields.\n\nAuthorization is required; only the authenticated user or an admin can retrieve this user's todos. The returned todo items include title, description, status, and timestamps, reflecting data from the todo_list_todos table.\n\nThis endpoint corresponds to the todo_list_todos table in the Prisma schema, linked to todo_list_user via the user ID foreign key. It enforces that only todos for the given userId are returned.\n\nErrors occur if the user does not exist or if unauthorized access is attempted.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination parameters to filter todos by status","typeName":"ITodoListTodos.IRequest"},"responseBody":{"description":"Paginated list of todo items for the user","typeName":"IPageITodoListTodos"},"authorizationType":null,"authorizationRole":"admin","name":"index"},{"specification":"This operation retrieves a specific todo item by its ID for a specified user. The todo item includes title, description, status, and related timestamps from the todo_list_todos table. Authorization restricts access to the todo owner or admins only.\n\nThe todo item must belong to the user specified by userId. The todoId is the unique identifier of the todo item. The operation returns the detailed todo item or a 404 error if not found or unauthorized.\n\nThis endpoint closely interacts with the todo_list_todos table and the todo_list_user table for ownership verification.","path":"/todoList/user/users/{userId}/todos/{todoId}","method":"get","summary":"Get a specific todo item for a user","description":"Retrieve detailed information for a specific todo item belonging to a specified user.\n\nThis endpoint returns the full data of the todo item including its title, description, and current status.\n\nAccess is restricted to the owner user or administrators. Unauthorized requests are denied with appropriate error messages.\n\nThis operation directly maps to the todo_list_todos table in the Prisma schema and enforces ownership checks based on the userId parameter.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}},{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed todo item information","typeName":"ITodoListTodos"},"authorizationType":null,"authorizationRole":"user","name":"at"},{"specification":"This operation retrieves a specific todo item by its ID for a specified user. The todo item includes title, description, status, and related timestamps from the todo_list_todos table. Authorization restricts access to the todo owner or admins only.\n\nThe todo item must belong to the user specified by userId. The todoId is the unique identifier of the todo item. The operation returns the detailed todo item or a 404 error if not found or unauthorized.\n\nThis endpoint closely interacts with the todo_list_todos table and the todo_list_user table for ownership verification.","path":"/todoList/admin/users/{userId}/todos/{todoId}","method":"get","summary":"Get a specific todo item for a user","description":"Retrieve detailed information for a specific todo item belonging to a specified user.\n\nThis endpoint returns the full data of the todo item including its title, description, and current status.\n\nAccess is restricted to the owner user or administrators. Unauthorized requests are denied with appropriate error messages.\n\nThis operation directly maps to the todo_list_todos table in the Prisma schema and enforces ownership checks based on the userId parameter.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}},{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed todo item information","typeName":"ITodoListTodos"},"authorizationType":null,"authorizationRole":"admin","name":"at"},{"specification":"This operation updates an existing todo item belonging to a specified user. It modifies fields such as title, description, and status for the todo item stored in the todo_list_todos table. The status value must be one of 'pending', 'in-progress', or 'completed'.\n\nOnly the owner of the todo or an admin can perform updates. Validation ensures the title is unique per user, non-empty, and within 100 characters, and description length is limited to 500 characters. Unauthorized or invalid updates are rejected.\n\nThe operation returns the updated todo item after successful modification.","path":"/todoList/user/users/{userId}/todos/{todoId}","method":"put","summary":"Update a todo item for a user","description":"Update an existing todo item for a user.\n\nThis operation allows modifying the title, description, and status of the todo item. The title must be unique per user, non-empty, and under 100 characters. The description may be updated up to 500 characters.\n\nThe status must be one of 'pending', 'in-progress', or 'completed'. Attempts to update status to invalid values will be rejected.\n\nAccess control restricts this operation to the todo owner or admins only.\n\nThis endpoint corresponds to the todo_list_todos table in the Prisma schema.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}},{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated todo item data","typeName":"ITodoListTodos.IUpdate"},"responseBody":{"description":"Updated todo item information","typeName":"ITodoListTodos"},"authorizationType":null,"authorizationRole":"user","name":"update"},{"specification":"This operation updates an existing todo item belonging to a specified user. It modifies fields such as title, description, and status for the todo item stored in the todo_list_todos table. The status value must be one of 'pending', 'in-progress', or 'completed'.\n\nOnly the owner of the todo or an admin can perform updates. Validation ensures the title is unique per user, non-empty, and within 100 characters, and description length is limited to 500 characters. Unauthorized or invalid updates are rejected.\n\nThe operation returns the updated todo item after successful modification.","path":"/todoList/admin/users/{userId}/todos/{todoId}","method":"put","summary":"Update a todo item for a user","description":"Update an existing todo item for a user.\n\nThis operation allows modifying the title, description, and status of the todo item. The title must be unique per user, non-empty, and under 100 characters. The description may be updated up to 500 characters.\n\nThe status must be one of 'pending', 'in-progress', or 'completed'. Attempts to update status to invalid values will be rejected.\n\nAccess control restricts this operation to the todo owner or admins only.\n\nThis endpoint corresponds to the todo_list_todos table in the Prisma schema.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}},{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated todo item data","typeName":"ITodoListTodos.IUpdate"},"responseBody":{"description":"Updated todo item information","typeName":"ITodoListTodos"},"authorizationType":null,"authorizationRole":"admin","name":"update"},{"specification":"This operation deletes a todo item permanently from the todo_list_todos table for a specified user. It requires the user to be the owner of the todo or an admin. After deletion, the todo item is no longer retrievable by any user.\n\nThe operation enforces ownership and authorization checks and returns no content after successful deletion.","path":"/todoList/user/users/{userId}/todos/{todoId}","method":"delete","summary":"Delete a todo item for a user","description":"Delete a todo item for a user.\n\nThis operation permanently removes the todo item from the database, ensuring it cannot be recovered or accessed further.\n\nAccess is restricted to the owner user or administrators. Unauthorized delete attempts are denied.\n\nThis operation corresponds to the todo_list_todos table in the Prisma schema and enforces data integrity and authorization checks.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}},{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"user","name":"erase"},{"specification":"This operation deletes a todo item permanently from the todo_list_todos table for a specified user. It requires the user to be the owner of the todo or an admin. After deletion, the todo item is no longer retrievable by any user.\n\nThe operation enforces ownership and authorization checks and returns no content after successful deletion.","path":"/todoList/admin/users/{userId}/todos/{todoId}","method":"delete","summary":"Delete a todo item for a user","description":"Delete a todo item for a user.\n\nThis operation permanently removes the todo item from the database, ensuring it cannot be recovered or accessed further.\n\nAccess is restricted to the owner user or administrators. Unauthorized delete attempts are denied.\n\nThis operation corresponds to the todo_list_todos table in the Prisma schema and enforces data integrity and authorization checks.","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}},{"name":"todoId","description":"Unique identifier of the target todo item","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated user with limited access; can view basic public information if applicable but cannot create or modify todos.","kind":"guest"},{"name":"user","description":"Authenticated user who can create, read, update, and delete their own todo items; manages personal todo list items.","kind":"member"},{"name":"admin","description":"Administrator with full access to manage all todos and users; can perform all operations including user management and system settings.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListGuest"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListTodos":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodos"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the guest entity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created.\n\nReflects the creation date and time of this guest record in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was last updated.\n\nReflects the last modification date and time of the guest record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the guest record was deleted (soft delete).\n\nNullable; a null value indicates the guest record is active."}},"required":["id","created_at","updated_at"],"description":"Guest entity for unauthenticated users with minimal permissions.\n\nThis table tracks guest entity creation, update, and soft deletion timestamps for auditing purposes.\n\nGuests have no authentication credentials such as email or password."},"ITodoListGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the authorized guest user"},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created.\n\nReflects the creation date and time of this guest record in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was last updated.\n\nReflects the last modification date and time of the guest record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the guest record was deleted (soft delete).\n\nNullable; a null value indicates the guest record is active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","updated_at","token"],"description":"Authorization response containing JWT tokens for guest users.\nReturned after creating guest account or refreshing tokens."},"ITodoListGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token string for obtaining new access tokens.\nMust be a valid token issued previously during guest authorization."}},"required":["refresh_token"],"description":"Token refresh request payload for guest users."},"ITodoListUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user.\n\nMust be a UUID string uniquely identifying the user."},"email":{"type":"string","description":"User email address used for authentication and contact.\n\nMust be unique across all users."},"password_hash":{"type":"string","description":"Hashed password for user authentication.\n\nStored securely; never exposed in responses."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user was deleted (soft delete).\n\nNullable; a null value means the user is active."}},"required":["id","email","password_hash","created_at","updated_at"],"description":"Represents authenticated users who can manage their own todo items.\n\nIncludes email and hashed password fields for secure authentication.\n\nSupports audit timestamps and soft deletion to maintain data integrity."},"ITodoListUser.ICreate":{"type":"object","properties":{"email":{"type":"string","description":"Unique user email for registration.\nMust be a valid email format as per standard conventions."},"password":{"type":"string","description":"Plaintext password provided by the user at registration.\nPassword complexity rules are checked server-side."}},"required":["email","password"],"description":"Request payload for creating a new user account.\nIncludes email and plaintext password for registration; password is hashed server-side."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the authorized user."},"email":{"type":"string","description":"User email address used for authentication and contact.\n\nMust be unique across all users."},"password_hash":{"type":"string","description":"Hashed password for user authentication.\n\nStored securely; never exposed in responses."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the user was deleted (soft delete).\n\nNullable; a null value means the user is active."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","password_hash","created_at","updated_at","token"],"description":"Authorization response containing JWT tokens for users.\nReturned after user registration, login, or token refresh."},"ITodoListUser.ILogin":{"type":"object","description":"Login credentials for todo_list_user role.\n\nIncludes unique email and password for authentication.\n\nPasswords are in plain text only for login requests; must be handled securely.\n\nThis type is used as the request body in login operations.","properties":{"email":{"type":"string","format":"email","description":"Unique email address of the user for authentication."},"password":{"type":"string","description":"Plain text password to authenticate the user."}},"required":["email","password"]},"ITodoListUser.IRefresh":{"type":"object","description":"Request body for refreshing JWT tokens of todo_list_user.\n\nContains the refresh token string.\n\nUsed to obtain new access tokens without re-login.\n\nThis type is used as request body in token refresh API.","properties":{"refresh_token":{"type":"string","description":"The refresh token string issued to the user."}},"required":["refresh_token"]},"ITodoListAdmin.ICreate":{"type":"object","description":"Request body for creating a new admin account.\n\nIncludes email and password for registration.\n\nEmail must be unique; password is plain text and will be hashed.\n\nUsed in admin join operation.","properties":{"email":{"type":"string","format":"email","description":"Unique email address for the administrator."},"password":{"type":"string","description":"Plain text password for admin account creation."}},"required":["email","password"]},"ITodoListAdmin.IAuthorized":{"type":"object","description":"Authentication response type for an administrator.\n\nIncludes admin id and JWT token information.\n\nUsed in admin login and join operations.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the administrator."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"]},"ITodoListAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin email address used for login authentication"},"password":{"type":"string","description":"Plaintext password used for login authentication"}},"required":["email","password"],"description":"Payload sent to login an admin user.\n\nemail: unique admin email for authentication.\npassword: plaintext password for validation (only input)."},"ITodoListAdmin.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"JWT refresh token string"}},"required":["refreshToken"],"description":"Payload sent to request refresh of JWT tokens."},"ITodoListGuest.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Page number for pagination, null to unset"},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Limit of items per page, null to unset"}},"required":[],"description":"Request type for filtering, sorting, and pagination of guest entities.\n\nSupports: page, limit, search filters, etc."},"ITodoListGuest.IUpdate":{"type":"object","properties":{"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was created.\n\nOptional; can be updated in exceptional situations."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the guest record was last updated.\n\nOptional; reflects the time of the last update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the guest record was deleted (soft delete).\n\nOptional nullable; setting to null means active."}},"required":[],"description":"Update data for todo_list_guest entity.\n\nAllows updating timestamps and soft deletion flag.\n\nDoes not include authentication credentials as guests have none."},"ITodoListUser.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional page number for pagination."},"limit":{"oneOf":[{"type":"number"},{"type":"null"}],"description":"Optional limit of records per page."},"emailContains":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional filter to include users whose email contains this substring."},"createdAfter":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter to retrieve users created after this datetime."},"createdBefore":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter to retrieve users created before this datetime."},"sortBy":{"oneOf":[{"const":"created_at"},{"const":"updated_at"},{"type":"null"}],"description":"Optional field to indicate sorting by 'created_at' or 'updated_at'."},"sortDirection":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Optional sorting direction; ascending or descending."}},"required":[],"description":"Request parameters for retrieving a filtered and paginated list of users."},"ITodoListUser.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Email address to update."},"password_hash":{"type":"string","description":"Hashed password to update."},"updated_at":{"type":"string","description":"Timestamp for last updated time."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null means active."}},"required":[],"description":"Update data for todo_list_user entity.\n\nAllows modifying email, hashed password, and timestamps.\n\nCannot modify immutable id field or other ownership properties."},"ITodoListTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the todo item."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Owner user's primary key.\n\nReferences the id of the user owning this todo."},"title":{"type":"string","description":"Title of the todo item.\n\nMust be unique per user and max length 100 characters."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the todo.\n\nMax length 500 characters."},"status":{"oneOf":[{"const":"pending","description":"Status of the todo item.\n\nMust be exactly one of 'pending', 'in-progress', or 'completed'."},{"const":"in-progress","description":"Status of the todo item.\n\nMust be exactly one of 'pending', 'in-progress', or 'completed'."},{"const":"completed","description":"Status of the todo item.\n\nMust be exactly one of 'pending', 'in-progress', or 'completed'."}],"description":"Status of the todo item.\n\nMust be exactly one of 'pending', 'in-progress', or 'completed'."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the todo was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null means active."}},"required":["id","todo_list_user_id","title","status","created_at","updated_at"],"description":"Represents todo items owned by users. Each todo has a unique title per user, supports statuses (pending, in-progress, completed), and stores optional descriptions. Enables independent CRUD and filtering operations by users. Maintains audit trail fields for creation, update, and optional soft deletion. Foreign key to todo_list_user ensures ownership linkage.\n\nImplements unique constraint on user and title for title uniqueness per user."},"ITodoListTodo.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination."},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","description":"Limitation of records per page.\n\n@default 100"},{"type":"null"}],"description":"Limitation of records per page.\n\n@default 100"},"status":{"oneOf":[{"const":"pending","description":"Filter todos by status; must be 'pending', 'in-progress', or 'completed'."},{"const":"in-progress","description":"Filter todos by status; must be 'pending', 'in-progress', or 'completed'."},{"const":"completed","description":"Filter todos by status; must be 'pending', 'in-progress', or 'completed'."},{"type":"null"}],"description":"Filter todos by status; must be 'pending', 'in-progress', or 'completed'."},"search":{"oneOf":[{"type":"string","description":"Search text to filter todos by title or description."},{"type":"null"}],"description":"Search text to filter todos by title or description."},"orderBy":{"oneOf":[{"type":"string","description":"Sort order for results, e.g. 'created_at_desc', 'title_asc'."},{"type":"null"}],"description":"Sort order for results, e.g. 'created_at_desc', 'title_asc'."}},"required":[],"description":"Request parameters for filtered, paginated todo list retrieval."},"ITodoListTodo.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","description":"Title of the todo item to update.\n\nOptional; must be unique per user, max length 100."},{"type":"null"}],"description":"Title of the todo item to update.\n\nOptional; must be unique per user, max length 100."},"description":{"oneOf":[{"type":"string","description":"Optional description to update.\n\nMax length 500."},{"type":"null"}],"description":"Optional description to update.\n\nMax length 500."},"status":{"oneOf":[{"const":"pending","description":"Status to update.\n\nMust be one of 'pending', 'in-progress', or 'completed'."},{"const":"in-progress","description":"Status to update.\n\nMust be one of 'pending', 'in-progress', or 'completed'."},{"const":"completed","description":"Status to update.\n\nMust be one of 'pending', 'in-progress', or 'completed'."},{"type":"null"}],"description":"Status to update.\n\nMust be one of 'pending', 'in-progress', or 'completed'."}},"required":[],"description":"Payload data to update an existing todo item."},"ITodoListTodos.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination."},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer","description":"Limitation of records per page.\n\n@default 100"},{"type":"null"}],"description":"Limitation of records per page.\n\n@default 100"},"status":{"oneOf":[{"const":"pending","description":"Filter todos by status."},{"const":"in-progress","description":"Filter todos by status."},{"const":"completed","description":"Filter todos by status."},{"type":"null"}],"description":"Filter todos by status."},"search":{"oneOf":[{"type":"string","description":"Search text to filter todos."},{"type":"null"}],"description":"Search text to filter todos."},"orderBy":{"oneOf":[{"type":"string","description":"Sort order preferences."},{"type":"null"}],"description":"Sort order preferences."}},"required":[],"description":"Request parameters for filtered, paginated todo list retrieval."},"ITodoListTodos":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier of the todo item."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Owner user's identifier.\n\nThis represents the foreign key to link the todo to its user."},"title":{"type":"string","description":"Title of the todo item; unique per user; max length 100.\n\nBrief textual title for the todo item."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the todo item; max length 500.\nCan be null if no description is provided."},"status":{"oneOf":[{"const":"pending","description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'.\nMust be exactly one of these strings."},{"const":"in-progress","description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'.\nMust be exactly one of these strings."},{"const":"completed","description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'.\nMust be exactly one of these strings."}],"description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'.\nMust be exactly one of these strings."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the todo item was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp; null means active."}},"required":["id","todo_list_user_id","title","status","created_at","updated_at"],"description":"Represents todo items owned by users.\n\nEach todo has a unique title per user, supports statuses (pending, in-progress, completed), and stores optional descriptions.\n\nEnables independent CRUD and filtering operations by users.\n\nMaintains audit trail fields for creation, update, and optional soft deletion.\n\nForeign key to todo_list_user ensures ownership linkage.\n\nImplements unique constraint on user and title for title uniqueness per user."},"ITodoListTodos.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Title of the todo item; max length 100.\n\nOptional for update; if provided, must comply with unique and length rules."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed description of the todo item; max length 500.\n\nNullable and optional for update."},"status":{"oneOf":[{"const":"pending","description":"Status of the todo item; possible values: 'pending', 'in-progress', 'completed'.\n\nOptional for update."},{"const":"in-progress","description":"Status of the todo item; possible values: 'pending', 'in-progress', 'completed'.\n\nOptional for update."},{"const":"completed","description":"Status of the todo item; possible values: 'pending', 'in-progress', 'completed'.\n\nOptional for update."}],"description":"Status of the todo item; possible values: 'pending', 'in-progress', 'completed'.\n\nOptional for update."}},"required":[],"description":"Update payload for todo items.\n\nAllows updates to title, description, and status.\n\nEach field is optional and nullable where applicable."},"ITodoListUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key uniquely identifying the user."},"email":{"type":"string","format":"email","description":"User email address used for authentication and contact.\n\nUnique across users."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the user was last updated."}},"required":["id","email","created_at","updated_at"],"description":"Summary view of the authenticated user entity.\n\nIncludes essential fields for list display and references the todo_list_user table.\n\nExcludes sensitive fields like password hash for security."},"ITodoListTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key uniquely identifying the todo item."},"title":{"type":"string","description":"Title of the todo item; unique per user; max length 100."},"status":{"oneOf":[{"const":"pending","description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'."},{"const":"in-progress","description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'."},{"const":"completed","description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'."}],"description":"Status of the todo item; possible values are 'pending', 'in-progress', 'completed'."}},"required":["id","title","status"],"description":"Summary view of a todo item entity for list displays.\n\nIncludes id, title, and status essential for concise presentation.\n\nReflects the todo_list_todos table with security considerations."}}}}